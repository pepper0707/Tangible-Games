#include <Adafruit_NeoPixel.h>

#define MAX_FLASHING_LEDS 3
#define LED_LIFESPAN 4000
#define LED_SPAWN_MIN 1000  //min spawn delay 
#define LED_SPAWN_MAX 3000  //max spawn delay 

unsigned long randomSpawnRate = 0;  //stores next random spawn time

const int neoPixelPin = 5;  //control pin for the LED strip
const int numPixels = 24;   //number of pixels in the strip


struct FlashingLED {
  bool active = false;  
  int pixel;            //pixel number for the LED
  unsigned long startTime;   //start time of LED flash
  unsigned long lastToggleTime;   //last time the LED was toggled
  int delayTime;             //time between toggles
  bool ledOn;                
  uint32_t color;            
};

FlashingLED flashingLeds[MAX_FLASHING_LEDS];  //array for active LEDs

// initialize the LED strip
Adafruit_NeoPixel strip = Adafruit_NeoPixel(numPixels, neoPixelPin, NEO_GRB + NEO_KHZ800);

void setup() {
  randomSeed(analogRead(0));  //gets random seed using random data from empty analog pin
  
  randomSpawnRate = 1000;  //first LED spawns after 1 second
  
  strip.begin();    //initialize the LED strip
  strip.clear();    //turn off all LEDs
  strip.show();     //update the strip
  Serial.begin(9600);  //initialize serial communication
}

void startFlashingLED(int pixel) {
  for (int i = 0; i < MAX_FLASHING_LEDS; i++) { //find an inactive LED slot
    if (!flashingLeds[i].active) {
      flashingLeds[i].active = true;  
      flashingLeds[i].pixel = pixel;  
      flashingLeds[i].startTime = millis();  //record the start time
      flashingLeds[i].lastToggleTime = millis();  //record the toggle time
      flashingLeds[i].delayTime = 500;  
      flashingLeds[i].ledOn = false;  
      flashingLeds[i].color = (random(2) == 0) ? strip.Color(255, 0, 0) : strip.Color(0, 0, 255);  //randomly pick blue or red
      return;  
    }
  }
  //no available slots
}

void updateFlashingLEDs() {
  unsigned long currentTime = millis();  //get current time

  for (int i = 0; i < MAX_FLASHING_LEDS; i++) {
    if (!flashingLeds[i].active) continue;  //skip inactive LEDs

    FlashingLED &led = flashingLeds[i];  //reference to the current LED

    if (currentTime - led.startTime >= LED_LIFESPAN) {  //check if LED lifespan is up
      strip.setPixelColor(led.pixel, 0);  //turn off LED
      strip.show();  // update the strip
      tone(8, 100, 100);  //make sound when LED is missed
      led.active = false;  
      continue;
    }

    if (currentTime - led.lastToggleTime >= led.delayTime) {  //check if its time to toggle
      led.lastToggleTime = currentTime;  //update the last toggle time
      led.ledOn = !led.ledOn;  //toggle the LED state

      if (led.ledOn) {
        strip.setPixelColor(led.pixel, led.color);  //LED on
      } else {
        strip.setPixelColor(led.pixel, 0); //LED off
        led.delayTime = max(30, led.delayTime * 0.7);  //decrease the delay to flash faster and faster
      }
      strip.show(); 
    }
  }
}

void loop() {
  updateFlashingLEDs();  //update all flashing LEDs

  //get a random pixel and make sure its not been used recently:
  int randomPixel;
  bool isDuplicate;

  const int maxUnique = 3;  //how many unique pixels before allowing repeats
  static int used[maxUnique];  //array to keep track of used pixels
  static int usedCount = 0;

  do {
    randomPixel = random(0, numPixels);  //generate a random pixel
    isDuplicate = false;

    //check if the pixel has been used
    for (int i = 0; i < usedCount; i++) {
      if (used[i] == randomPixel) {
        isDuplicate = true;
        break;
      }
    }
  } while (isDuplicate);  //loop until randomPixel is a pixel not in the used array

  //add randomPixel to used array
  if (usedCount < maxUnique) {
    used[usedCount++] = randomPixel;
  } else {
    //reset the array when full
    usedCount = 0;
    used[usedCount++] = randomPixel;
  }

  static unsigned long lastTrigger = 0;
  if (millis() - lastTrigger > randomSpawnRate) {  //check if its time to spawn a new LED
    lastTrigger = millis();
    startFlashingLED(randomPixel);  //start the LED flashing
  }
  
  
  randomSpawnRate = random(LED_SPAWN_MIN, LED_SPAWN_MAX); //randomize the next spawn rate 
}
