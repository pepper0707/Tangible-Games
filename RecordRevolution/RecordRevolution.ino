// ===== Libary Includes =====
#include "AS5600.h"             // Magnetic Encoder
#include <Adafruit_NeoPixel.h>  // LED Strip
#include "TM1637.h"             // Segment Displays
#include <PCM.h>                // This is for playing sounds, it breaks pwm on certain pins CAREFUL
#include <EEPROM.h>             //Non volitale memory

// ===== Sound Data =====

// Sound effect for successful hit
const unsigned char hit[] PROGMEM = {
133, 132, 135, 135, 135, 133, 131, 130, 128, 127, 126, 124, 124, 125, 124, 126, 125, 125, 126, 125, 128, 127, 127, 128, 130, 131, 128, 129, 127, 124, 125, 126, 123, 124, 124, 123, 121, 119, 122, 120, 121, 124, 125, 127, 125, 129, 128, 126, 129, 130, 128, 128, 129, 129, 128, 126, 127, 126, 127, 128, 127, 128, 124, 128, 129, 125, 128, 126, 126, 126, 127, 128, 129, 129, 132, 133, 132, 133, 133, 133, 130, 131, 130, 127, 129, 128, 129, 128, 130, 131, 129, 129, 129, 129, 128, 129, 127, 125, 126, 124, 124, 125, 126, 128, 129, 127, 130, 130, 128, 129, 128, 128, 126, 128, 126, 124, 128, 128, 129, 126, 129, 130, 127, 129, 130, 130, 130, 126, 127, 132, 127, 127, 130, 125, 130, 128, 127, 131, 130, 131, 132, 131, 130, 130, 130, 131, 128, 128, 130, 129, 128, 125, 126, 125, 125, 125, 125, 124, 122, 124, 127, 124, 120, 124, 124, 124, 127, 125, 127, 126, 126, 126, 128, 129, 128, 132, 133, 132, 129, 130, 131, 128, 130, 132, 128, 128, 130, 127, 126, 127, 127, 129, 126, 127, 129, 127, 125, 127, 127, 126, 126, 125, 125, 127, 126, 124, 127, 124, 125, 130, 126, 126, 125, 126, 127, 125, 127, 123, 126, 128, 124, 124, 126, 126, 120, 125, 125, 123, 147, 151, 148, 157, 135, 136, 132, 82, 71, 67, 55, 72, 65, 58, 65, 67, 76, 82, 97, 113, 118, 142, 150, 156, 175, 169, 176, 180, 179, 174, 171, 201, 177, 186, 247, 209, 192, 220, 208, 191, 175, 205, 205, 140, 147, 166, 119, 77, 102, 130, 69, 48, 77, 32, 8, 31, 34, 23, 0, 42, 97, 64, 67, 96, 67, 47, 62, 82, 78, 72, 81, 76, 81, 76, 44, 37, 62, 119, 160, 145, 160, 177, 133, 132, 182, 186, 202, 244, 227, 204, 217, 227, 247, 238, 207, 224, 240, 225, 225, 232, 230, 230, 237, 226, 218, 212, 187, 187, 193, 188, 193, 194, 198, 160, 111, 115, 108, 89, 61, 24, 18, 17, 17, 17, 12, 13, 11, 13, 15, 18, 18, 18, 19, 18, 30, 51, 94, 112, 90, 113, 139, 146, 151, 154, 181, 187, 196, 221, 210, 212, 227, 217, 205, 196, 188, 189, 173, 154, 165, 149, 119, 128, 124, 91, 59, 51, 50, 31, 20, 19, 16, 15, 17, 15, 12, 20, 11, 15, 25, 21, 56, 71, 65, 96, 132, 142, 135, 169, 208, 211, 224, 234, 232, 236, 237, 236, 236, 233, 232, 233, 235, 239, 231, 240, 239, 218, 239, 228, 234, 242, 180, 214, 204, 137, 154, 106, 99, 123, 92, 103, 103, 107, 90, 79, 98, 71, 108, 130, 95, 96, 77, 82, 101, 97, 78, 62, 47, 21, 53, 64, 38, 52, 42, 50, 62, 55, 69, 70, 76, 86, 89, 90, 115, 138, 120, 135, 153, 170, 187, 176, 199, 181, 163, 174, 148, 170, 166, 142, 166, 157, 164, 174, 160, 151, 130, 134, 139, 137, 151, 140, 143, 161, 157, 146, 108, 76, 72, 59, 74, 83, 70, 79, 62, 46, 41, 30, 32, 32, 50, 41, 34, 51, 41, 84, 71, 41, 105, 84, 66, 97, 85, 93, 104, 112, 105, 124, 156, 126, 137, 151, 136, 151, 157, 172, 170, 162, 182, 180, 175, 183, 169, 168, 194, 173, 160, 174, 146, 150, 160, 152, 157, 144, 149, 135, 133, 153, 138, 172, 186, 169, 198, 199, 199, 208, 193, 193, 192, 200, 223, 221, 221, 231, 207, 195, 194, 187, 199, 186, 180, 175, 167, 199, 198, 204, 196, 152, 162, 144, 131, 139, 116, 139, 128, 94, 121, 113, 73, 56, 54, 37, 35, 53, 53, 37, 17, 43, 49, 15, 45, 58, 31, 38, 38, 31, 38, 48, 67, 85, 75, 75, 88, 99, 122, 132, 134, 131, 122, 134, 146, 145, 138, 161, 192, 170, 175, 182, 191, 214, 205, 214, 198, 179, 203, 188, 191, 210, 183, 165, 160, 152, 188, 214, 165, 145, 125, 128, 159, 128, 137, 158, 159, 158, 157, 149, 121, 152, 151, 113, 145, 131, 129, 167, 173, 162, 130, 139, 110, 120, 148, 107, 158, 148, 85, 116, 118, 83, 80, 101, 59, 50, 84, 37, 33, 44, 61, 62, 32, 19, 42, 28, 23, 48, 41, 31, 23, 42, 22, 44, 57, 64, 65, 52, 71, 46, 41, 86, 50, 80, 69, 12, 74, 18, 59, 79, 50, 84, 82, 75, 113, 143, 115, 140, 147, 137, 178, 171, 179, 211, 154, 183, 216, 200, 185, 209, 223, 182, 180, 202, 192, 188, 215, 232, 210, 211, 242, 193, 226, 215, 214, 215, 215, 220, 223, 255, 226, 248, 229, 217, 238, 231, 189, 205, 207, 213, 205, 180, 171, 193, 159, 176, 207, 138, 169, 129, 175, 168, 127, 158, 132, 120, 131, 154, 130, 133, 181, 135, 141, 137, 99, 129, 124, 116, 124, 126, 76, 99, 57, 63, 91, 43, 44, 42, 28, 31, 45, 32, 19, 24, 20, 16, 29, 9, 38, 25, 12, 21, 14, 10, 28, 43, 51, 46, 45, 56, 63, 53, 83, 107, 64, 87, 87, 112, 102, 109, 121, 118, 105, 103, 125, 116, 131, 155, 165, 135, 142, 140, 134, 126, 162, 175, 120, 131, 148, 125, 135, 156, 124, 114, 122, 92, 103, 123, 137, 128, 94, 151, 158, 113, 130, 186, 202, 177, 176, 170, 175, 213, 233, 197, 179, 200, 189, 169, 185, 224, 210, 189, 233, 198, 214, 233, 191, 240, 205, 189, 225, 239, 188, 214, 245, 230, 234, 187, 223, 202, 188, 224, 201, 171, 195, 180, 179, 178, 183, 156, 158, 169, 120, 147, 128, 157, 155, 135, 147, 146, 141, 150, 188, 143, 131, 147, 98, 135, 124, 132, 119, 114, 133, 67, 88, 73, 99, 49, 43, 54, 39, 38, 30, 55, 21, 35, 12, 33, 27, 21, 48, 55, 65, 20, 28, 27, 15, 23, 33, 23, 16, 22, 36, 29, 31, 79, 35, 49, 23, 43, 64, 42, 88, 45, 76, 56, 62, 75, 70, 111, 84, 96, 97, 111, 122, 112, 140, 121, 147, 151, 143, 164, 182, 190, 162, 169, 172, 171, 158, 181, 187, 198, 190, 180, 152, 170, 187, 191, 215, 164, 184, 191, 200, 168, 195, 213, 180, 189, 180, 212, 195, 208, 219, 208, 181, 197, 216, 176, 218, 189, 202, 220, 171, 210, 189, 209, 208, 196, 182, 186, 193, 153, 217, 183, 158, 183, 164, 142, 162, 167, 172, 177, 161, 166, 154, 145, 167, 164, 126, 172, 133, 131, 150, 133, 168, 161, 133, 143, 151, 98, 109, 147, 124, 132, 98, 92, 132, 80, 117, 116, 90, 45, 92, 100, 47, 120, 68, 83, 107, 53, 82, 84, 121, 111, 64, 81, 73, 71, 43, 139, 67, 63, 86, 27, 64, 42, 92, 38, 48, 35, 44, 32, 32, 79, 10, 38, 42, 16, 23, 16, 47, 57, 33, 32, 40, 55, 15, 57, 71, 58, 80, 45, 95, 90, 80, 103, 110, 83, 71, 105, 75, 98, 101, 109, 127, 68, 104, 103, 101, 156, 120, 129, 98, 146, 117, 133, 189, 133, 180, 147, 182, 160, 184, 208, 176, 157, 157, 201, 137, 171, 154, 112, 152, 163, 142, 99, 130, 172, 176, 155, 174, 175, 152, 184, 217, 215, 177, 224, 203, 203, 210, 212, 241, 209, 191, 178, 198, 167, 181, 180, 187, 163, 139, 191, 133, 153, 194, 170, 145, 146, 181, 126, 214, 209, 189, 200, 164, 211, 181, 220, 212, 208, 204, 220, 221, 188, 229, 216, 189, 226, 196, 173, 184, 205, 192, 175, 177, 138, 137, 89, 121, 136, 70, 90, 105, 47, 70, 72, 87, 64, 44, 39, 56, 58, 24, 85, 40, 79, 52, 51, 90, 57, 99, 107, 91, 55, 97, 94, 45, 143, 66, 64, 98, 64, 101, 43, 104, 78, 61, 40, 63, 69, 18, 83, 39, 36, 53, 17, 17, 18, 51, 32, 29, 51, 21, 26, 9, 56, 36, 12, 57, 45, 46, 50, 90, 97, 78, 92, 78, 113, 79, 101, 157, 113, 158, 112, 122, 148, 132, 164, 147, 152, 112, 150, 155, 123, 210, 148, 170, 186, 156, 194, 187, 226, 197, 203, 165, 211, 215, 161, 226, 197, 170, 186, 184, 123, 167, 195, 137, 190, 164, 148, 178, 144, 208, 180, 126, 173, 173, 144, 160, 221, 193, 191, 202, 158, 205, 175, 177, 236, 187, 183, 200, 196, 196, 209, 202, 214, 197, 150, 194, 190, 155, 216, 190, 168, 180, 169, 159, 178, 190, 142, 171, 148, 141, 156, 125, 146, 145, 91, 101, 119, 79, 82, 133, 73, 68, 100, 62, 79, 36, 61, 84, 36, 44, 88, 16, 21, 110, 67, 42, 82, 44, 66, 83, 64, 128, 98, 82, 108, 122, 75, 124, 127, 118, 137, 78, 106, 127, 88, 123, 150, 92, 99, 119, 102, 116, 163, 105, 112, 120, 62, 114, 131, 130, 157, 98, 121, 125, 117, 123, 160, 148, 90, 183, 129, 129, 143, 143, 167, 146, 115, 144, 152, 131, 214, 180, 127, 194, 141, 122, 172, 136, 186, 171, 138, 127, 195, 116, 150, 212, 103, 154, 125, 144, 160, 114, 121, 168, 109, 76, 140, 84, 75, 158, 100, 50, 75, 62, 51, 102, 76, 69, 86, 33, 99, 41, 33, 90, 68, 31, 61, 81, 38, 55, 58, 60, 44, 43, 48, 85, 50, 92, 134, 78, 115, 91, 56, 118, 120, 96, 148, 122, 102, 152, 148, 160, 185, 135, 151, 168, 153, 141, 179, 186, 205, 180, 153, 211, 152, 190, 226, 211, 162, 198, 203, 164, 202, 231, 221, 191, 180, 194, 205, 169, 227, 200, 166, 172, 187, 173, 173, 167, 164, 164, 132, 134, 153, 133, 156, 175, 144, 158, 118, 125, 138, 167, 91, 156, 135, 77, 157, 106, 148, 167, 112, 110, 126, 99, 105, 122, 140, 113, 111, 84, 149, 100, 81, 160, 125, 87, 82, 143, 89, 91, 133, 152, 109, 100, 118, 122, 125, 142, 144, 132, 133, 137, 123, 142, 155, 135, 115, 108, 106, 77, 130, 129, 143, 89, 106, 101, 99, 72, 93, 105, 77, 111, 38, 94, 67, 70, 113, 103, 49, 66, 79, 66, 63, 106, 98, 48, 84, 67, 83, 80, 127, 134, 86, 55, 93, 86, 79, 108, 110, 56, 81, 109, 87, 91, 116, 138, 84, 121, 82, 123, 137, 172, 175, 111, 144, 137, 133, 139, 174, 187, 163, 149, 157, 133, 176, 127, 184, 175, 91, 158, 162, 174, 139, 172, 185, 120, 131, 128, 135, 144, 115, 174, 108, 112, 122, 107, 130, 121, 173, 99, 144, 138, 108, 129, 148, 165, 109, 130, 148, 151, 159, 163, 229, 163, 156, 195, 139, 202, 188, 232, 179, 191, 206, 164, 200, 174, 224, 183, 155, 172, 155, 169, 167, 152, 177, 115, 131, 133, 108, 88, 91, 143, 86, 53, 55, 77, 44, 56, 74, 32, 30, 40, 31, 43, 34, 100, 59, 66, 68, 43, 113, 80, 123, 64, 75, 85, 101, 111, 95, 160, 126, 100, 112, 104, 94, 113, 129, 122, 99, 112, 115, 121, 107, 148, 133, 97, 129, 117, 103, 139, 149, 122, 150, 133, 131, 166, 143, 149, 212, 157, 153, 177, 183, 179, 155, 220, 208, 173, 186, 179, 177, 189, 209, 225, 176, 185, 181, 166, 211, 187, 168, 151, 147, 179, 149, 146, 161, 164, 175, 99, 134, 148, 95, 130, 139, 102, 82, 109, 92, 83, 70, 100, 103, 41, 87, 64, 46, 106, 76, 62, 67, 75, 78, 92, 108, 102, 165, 127, 131, 163, 139, 176, 188, 202, 174, 206, 205, 178, 191, 193, 238, 190, 178, 210, 167, 193, 195, 170, 157, 142, 155, 115, 146, 132, 126, 156, 106, 110, 87, 78, 72, 55, 84, 48, 67, 74, 47, 58, 38, 115, 46, 47, 87, 36, 83, 91, 104, 80, 138, 95, 88, 146, 103, 141, 143, 105, 136, 129, 103, 130, 136, 145, 124, 119, 109, 143, 98, 112, 194, 92, 98, 120, 126, 136, 120, 139, 127, 150, 132, 133, 130, 135, 197, 153, 143, 150, 139, 144, 139, 160, 163, 151, 126, 158, 169, 110, 146, 178, 174, 142, 118, 131, 159, 164, 117, 132, 143, 141, 101, 102, 133, 161, 122, 96, 125, 89, 88, 110, 113, 89, 79, 73, 86, 69, 82, 81, 120, 99, 64, 98, 79, 104, 87, 94, 77, 71, 111, 101, 109, 124, 139, 158, 98, 136, 115, 114, 133, 113, 140, 111, 152, 130, 133, 121, 143, 157, 119, 102, 134, 142, 98, 141, 141, 121, 112, 127, 132, 125, 142, 163, 146, 150, 135, 132, 154, 148, 164, 166, 158, 185, 164, 156, 171, 169, 208, 149, 160, 181, 163, 165, 186, 171, 134, 215, 154, 146, 176, 143, 187, 160, 174, 166, 168, 163, 175, 171, 132, 209, 169, 178, 161, 156, 184, 141, 143, 152, 162, 135, 160, 178, 122, 114, 146, 118, 120, 98, 123, 118, 114, 145, 99, 112, 93, 116, 102, 81, 118, 99, 106, 96, 78, 108, 108, 90, 83, 88, 69, 66, 73, 52, 58, 38, 60, 56, 39, 48, 56, 60, 72, 96, 52, 56, 87, 79, 75, 75, 108, 126, 110, 142, 108, 109, 135, 141, 131, 127, 175, 108, 126, 143, 122, 115, 129, 154, 119, 119, 122, 123, 101, 91, 107, 108, 73, 75, 72, 78, 100, 73, 72, 75, 53, 65, 92, 64, 58, 108, 74, 59, 116, 87, 104, 129, 107, 120, 130, 112, 134, 138, 137, 200, 176, 143, 197, 207, 196, 212, 168, 195, 199, 182, 208, 217, 215, 216, 228, 202, 223, 211, 215, 226, 195, 194, 221, 196, 175, 213, 204, 200, 202, 180, 175, 199, 191, 199, 195, 164, 178, 167, 159, 186, 169, 174, 187, 167, 158, 162, 139, 126, 154, 131, 152, 144, 128, 129, 125, 128, 130, 125, 89, 123, 120, 96, 97, 94, 96, 95, 73, 98, 99, 67, 66, 84, 79, 58, 77, 45, 52, 55, 62, 81, 73, 56, 69, 96, 53, 69, 87, 72, 99, 112, 107, 82, 105, 122, 109, 110, 84, 103, 92, 101, 115, 74, 93, 77, 84, 78, 58, 74, 57, 62, 45, 56, 67, 71, 70, 55, 59, 68, 70, 83, 103, 109, 114, 108, 130, 112, 110, 151, 144, 161, 167, 165, 170, 149, 182, 157, 162, 171, 166, 158, 168, 188, 136, 191, 173, 166, 184, 171, 159, 158, 201, 155, 163, 157, 160, 174, 157, 181, 152, 141, 145, 158, 130, 125, 164, 120, 129, 138, 107, 124, 130, 148, 132, 138, 137, 128, 149, 114, 137, 137, 147, 155, 130, 173, 176, 161, 150, 150, 152, 156, 188, 159, 180, 166, 160, 190, 164, 166, 136, 154, 146, 147, 116, 123, 139, 94, 115, 108, 100, 81, 97, 92, 101, 111, 92, 113, 105, 116, 122, 144, 145, 122, 138, 132, 143, 166, 141, 130, 168, 138, 149, 167, 109, 161, 132, 129, 136, 119, 112, 107, 141, 73, 116, 96, 101, 109, 69, 91, 81, 82, 69, 95, 67, 98, 99, 47, 72, 66, 56, 99, 86, 64, 113, 91, 80, 113, 87, 116, 107, 95, 128, 122, 149, 166, 161, 138, 180, 156, 148, 165, 182, 187, 166, 160, 159, 214, 154, 196, 176, 145, 169, 141, 153, 141, 140, 141, 154, 121, 133, 120, 112, 120, 113, 102, 117, 115, 104, 122, 115, 104, 130, 106, 101, 120, 81, 131, 131, 89, 95, 130, 99, 114, 112, 111, 147, 127, 116, 150, 124, 126, 155, 117, 149, 122, 133, 137, 135, 129, 125, 132, 114, 134, 137, 117, 143, 126, 117, 124, 109, 114, 123, 127, 109, 151, 115, 147, 137, 128, 165, 145, 147, 160, 172, 141, 154, 187, 185, 131, 172, 163, 142, 151, 135, 138, 140, 146, 117, 128, 112, 125, 95, 118, 98, 94, 108, 69, 111, 84, 98, 77, 90, 85, 85, 99, 95, 106, 84, 106, 109, 118, 101, 117, 132, 121, 138, 116, 140, 118, 145, 131, 133, 160, 107, 151, 143, 164, 132, 159, 134, 136, 163, 138, 158, 151, 178, 145, 182, 179, 162, 173, 194, 171, 177, 183, 175, 166, 143, 190, 139, 145, 154, 125, 131, 113, 125, 101, 110, 101, 87, 87, 82, 92, 77, 108, 64, 85, 83, 68, 95, 69, 97, 73, 94, 77, 103, 105, 83, 111, 101, 116, 88, 115, 97, 102, 115, 139, 126, 98, 133, 127, 103, 125, 147, 104, 114, 133, 161, 119, 139, 174, 131, 124, 146, 164, 126, 114, 171, 144, 145, 149, 137, 164, 132, 146, 152, 157, 109, 169, 138, 143, 157, 127, 170, 118, 151, 128, 151, 112, 126, 139, 116, 135, 126, 138, 108, 128, 148, 126, 127, 140, 131, 151, 123, 168, 135, 151, 160, 159, 172, 151, 141, 129, 162, 137, 153, 121, 158, 157, 125, 145, 165, 120, 106, 134, 153, 103, 153, 147, 135, 133, 92, 168, 110, 132, 96, 139, 148, 107, 140, 144, 112, 135, 121, 137, 122, 111, 131, 97, 152, 82, 150, 105, 99, 120, 85, 117, 110, 107, 76, 101, 104, 83, 120, 115, 97, 137, 114, 143, 122, 115, 137, 118, 112, 128, 115, 119, 146, 117, 127, 143, 84, 131, 123, 70, 140, 109, 130, 113, 118, 137, 126, 99, 136, 123, 87, 167, 113, 138, 148, 141, 149, 126, 127, 131, 132, 129, 158, 119, 132, 164, 115, 151, 118, 96, 142, 103, 110, 138, 121, 101, 119, 106, 115, 119, 93, 141, 109, 93, 120, 102, 95, 120, 118, 89, 128, 68, 79, 118, 86, 114, 96, 83, 117, 87, 118, 142, 100, 115, 141, 109, 112, 153, 108, 157, 148, 133, 142, 154, 147, 159, 173, 156, 153, 167, 143, 182, 173, 169, 211, 164, 176, 145, 205, 145, 189, 173, 148, 177, 152, 162, 177, 151, 142, 180, 136, 133, 148, 159, 118, 185, 132, 120, 144, 110, 113, 133, 111, 124, 140, 103, 113, 121, 97, 133, 122, 85, 126, 119, 117, 130, 137, 102, 136, 123, 117, 115, 140, 93, 132, 121, 108, 136, 94, 111, 119, 104, 98, 149, 99, 102, 100, 115, 108, 117, 97, 118, 112, 94, 128, 125, 100, 132, 126, 94, 145, 114, 137, 160, 126, 109, 160, 119, 135, 138, 114, 136, 129, 115, 138, 128, 128, 155, 118, 131, 129, 134, 134, 147, 138, 153, 141, 111, 153, 148, 131, 141, 140, 143, 121, 144, 132, 112, 114, 122, 110, 72, 106, 107, 107, 92, 126, 105, 91, 90, 89, 126, 104, 131, 107, 113, 116, 105, 149, 144, 139, 109, 146, 144, 126, 154, 135, 139, 128, 124, 120, 127, 117, 134, 131, 109, 114, 117, 110, 112, 111, 113, 138, 114, 109, 132, 135, 132, 141, 128, 129, 153, 130, 138, 168, 125, 146, 142, 124, 143, 128, 144, 136, 136, 130, 133, 143, 110, 146, 118, 133, 143, 117, 139, 114, 162, 145, 165, 141, 127, 156, 122, 158, 162, 152, 156, 133, 134, 145, 151, 139, 139, 134, 112, 141, 118, 137, 113, 110, 135, 85, 117, 105, 110, 128, 95, 126, 102, 117, 98, 113, 119, 114, 138, 82, 132, 99, 116, 123, 94, 114, 83, 102, 122, 121, 91, 113, 131, 76, 130, 94, 120, 135, 96, 140, 112, 127, 115, 149, 118, 153, 140, 109, 148, 123, 161, 147, 139, 158, 115, 131, 142, 148, 135, 148, 158, 94, 153, 128, 141, 149, 135, 154, 133, 147, 151, 137, 141, 155, 157, 123, 158, 150, 113, 170, 123, 161, 119, 139, 132, 129, 145, 121, 192, 110, 140, 133, 137, 160, 111, 150, 147, 117, 143, 146, 134, 126, 165, 130, 115, 146, 113, 161, 113, 137, 154, 115, 116, 124, 121, 98, 142, 133, 72, 114, 104, 110, 125, 104, 129, 92, 127, 103, 141, 96, 126, 135, 82, 134, 122, 138, 125, 140, 114, 115, 115, 108, 111, 114, 84, 139, 96, 86, 119, 115, 116, 109, 102, 92, 111, 60, 134, 100, 106, 120, 92, 99, 115, 124, 127, 113, 113, 122, 122, 116, 121, 136, 99, 161, 82, 92, 116, 119, 112, 126, 124, 104, 137, 101, 174, 128, 127, 165, 137, 120, 149, 166, 145, 172, 167, 141, 164, 140, 161, 175, 129, 167, 151, 131, 144, 175, 164, 156, 132, 135, 163, 107, 119, 177, 125, 125, 141, 115, 131, 129, 149, 121, 156, 125, 139, 132, 110, 166, 126, 168, 146, 122, 124, 145, 155, 124, 153, 133, 114, 144, 109, 138, 131, 128, 127, 106, 113, 90, 143, 115, 148, 138, 105, 147, 116, 112, 145, 136, 115, 119, 112, 100, 142, 133, 127, 140, 80, 127, 112, 88, 129, 132, 99, 108, 124, 102, 116, 128, 115, 126, 98, 101, 131, 99, 122, 131, 128, 115, 117, 111, 141, 138, 119, 145, 125, 114, 114, 131, 138, 133, 131, 120, 118, 119, 115, 122, 137, 132, 107, 108, 135, 120, 123, 159, 140, 124, 100, 144, 122, 124, 153, 135, 139, 122, 137, 127, 145, 140, 152, 133, 124, 121, 126, 154, 132, 142, 139, 120, 118, 108, 141, 124, 126, 132, 113, 112, 105, 136, 116, 136, 110, 124, 115, 104, 124, 125, 136, 120, 122, 103, 116, 107, 122, 130, 128, 105, 120, 117, 119, 139, 140, 159, 128, 121, 135, 147, 126, 152, 162, 132, 141, 127, 120, 144, 132, 144, 132, 123, 126, 125, 143, 129, 144, 135, 123, 115, 118, 134, 130, 125, 133, 126, 121, 132, 139, 146, 148, 158, 137, 132, 140, 131, 135, 147, 138, 125, 119, 120, 136, 133, 117, 139, 115, 113, 117, 106, 134, 106, 125, 111, 108, 112, 109, 123, 114, 130, 121, 128, 125, 114, 137, 140, 129, 136, 132, 130, 128, 145, 133, 135, 128, 134, 128, 128, 141, 134, 149, 132, 134, 130, 138, 130, 129, 136, 127, 123, 125, 126, 138, 130, 134, 135, 125, 128, 117, 140, 127, 127, 139, 123, 120, 122, 117, 131, 123, 113, 119, 118, 110, 121, 124, 124, 121, 117, 124, 113, 130, 124, 137, 129, 123, 127, 125, 132, 122, 133, 130, 119, 121, 121, 123, 125, 127, 130, 116, 117, 119, 122, 126, 124, 126, 123, 118, 117, 123, 131, 122, 122, 122, 121, 120, 122, 127, 124, 130, 122, 130, 121, 127, 130, 127, 136, 124, 120, 130, 128, 124, 133, 135, 131, 127, 131, 131, 134, 134, 138, 137, 130, 137, 135, 139, 133, 138, 136, 132, 134, 127, 142, 128, 137, 137, 127, 131, 128, 132, 124, 134, 128, 128, 129, 123, 130, 128, 131, 130, 131, 133, 128, 135, 130, 139, 131, 134, 134, 133, 136, 130, 141, 129, 134, 129, 132, 133, 131, 123, 131, 126, 122, 126, 119, 123, 114, 123, 115, 115, 111, 115, 116, 110, 114, 115, 111, 112, 113, 115, 116, 115, 117, 122, 116, 119, 125, 118, 124, 126, 132, 125, 129, 132, 136, 131, 138, 135, 132, 139, 130, 138, 133, 136, 137, 133, 130, 136, 131, 132, 137, 125, 129, 133, 127, 131, 
};

// Sound effect for missed led
const unsigned char miss[] PROGMEM = {
129, 129, 129, 129, 129, 128, 128, 129, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 127, 126, 125, 124, 123, 122, 122, 120, 120, 120, 118, 117, 116, 117, 117, 115, 115, 114, 116, 116, 116, 117, 117, 119, 119, 120, 120, 120, 123, 123, 122, 124, 125, 126, 126, 128, 129, 128, 130, 131, 132, 133, 133, 134, 135, 136, 136, 138, 136, 136, 138, 139, 140, 138, 139, 140, 140, 141, 140, 142, 141, 140, 144, 142, 143, 142, 143, 145, 144, 145, 144, 146, 146, 146, 149, 146, 148, 148, 149, 149, 148, 151, 149, 150, 151, 148, 152, 150, 149, 150, 150, 153, 149, 146, 152, 151, 147, 148, 149, 150, 148, 145, 151, 149, 147, 149, 146, 148, 147, 146, 148, 145, 147, 145, 146, 147, 142, 143, 145, 144, 141, 141, 140, 137, 140, 137, 140, 138, 130, 134, 132, 132, 131, 130, 134, 125, 127, 129, 126, 129, 121, 121, 125, 121, 122, 124, 119, 116, 118, 116, 117, 115, 112, 117, 111, 109, 111, 111, 108, 104, 110, 107, 105, 104, 101, 108, 100, 98, 100, 95, 99, 97, 97, 95, 96, 96, 92, 98, 91, 92, 97, 90, 95, 90, 88, 94, 92, 88, 88, 93, 88, 88, 88, 87, 92, 84, 84, 88, 92, 87, 78, 84, 82, 97, 103, 86, 79, 68, 85, 97, 78, 80, 90, 94, 78, 72, 95, 108, 113, 91, 50, 54, 118, 164, 109, 18, 23, 116, 162, 119, 41, 29, 115, 129, 82, 85, 93, 110, 93, 53, 78, 132, 157, 99, 20, 42, 129, 186, 133, 5, 13, 184, 205, 48, 15, 125, 174, 92, 59, 114, 90, 106, 156, 82, 58, 148, 172, 103, 58, 67, 91, 174, 202, 47, 15, 219, 217, 13, 55, 204, 131, 39, 142, 184, 48, 69, 235, 186, 40, 84, 191, 160, 81, 90, 122, 165, 188, 94, 72, 167, 183, 142, 92, 123, 164, 105, 135, 195, 137, 59, 117, 251, 159, 34, 136, 217, 140, 91, 166, 136, 131, 217, 105, 77, 148, 198, 220, 61, 129, 222, 95, 177, 199, 122, 105, 111, 235, 192, 81, 146, 212, 162, 88, 196, 198, 82, 176, 172, 106, 147, 145, 203, 181, 89, 173, 185, 129, 171, 161, 163, 154, 123, 191, 199, 159, 135, 151, 189, 128, 174, 191, 114, 199, 167, 134, 204, 131, 146, 218, 179, 120, 134, 195, 162, 158, 168, 150, 205, 147, 106, 215, 210, 125, 128, 178, 198, 141, 104, 205, 205, 108, 183, 186, 134, 173, 136, 174, 216, 147, 151, 163, 165, 176, 169, 170, 164, 198, 192, 104, 122, 216, 198, 146, 136, 168, 231, 160, 125, 203, 137, 147, 212, 145, 146, 167, 157, 142, 162, 218, 174, 141, 158, 182, 179, 121, 161, 158, 140, 244, 173, 87, 139, 150, 206, 203, 115, 133, 163, 181, 213, 167, 113, 117, 167, 210, 157, 128, 192, 179, 107, 110, 141, 170, 226, 171, 82, 168, 199, 153, 184, 135, 127, 172, 115, 142, 191, 156, 173, 159, 94, 130, 187, 166, 153, 159, 155, 130, 106, 188, 221, 153, 149, 133, 114, 129, 125, 180, 203, 155, 137, 99, 90, 160, 194, 161, 138, 139, 145, 144, 119, 131, 160, 151, 157, 157, 138, 113, 121, 183, 164, 113, 129, 160, 182, 156, 125, 120, 134, 163, 141, 131, 154, 151, 140, 122, 126, 150, 173, 157, 111, 142, 180, 162, 135, 134, 161, 127, 102, 132, 144, 168, 170, 132, 102, 135, 185, 147, 130, 149, 138, 135, 134, 142, 129, 109, 155, 191, 183, 156, 111, 106, 144, 142, 127, 137, 129, 143, 171, 163, 152, 124, 106, 122, 125, 136, 160, 157, 137, 154, 160, 139, 146, 126, 117, 135, 109, 110, 135, 151, 167, 154, 137, 128, 137, 132, 105, 123, 131, 115, 120, 117, 121, 127, 146, 160, 132, 117, 104, 93, 110, 123, 142, 140, 109, 93, 81, 98, 123, 116, 124, 129, 111, 105, 109, 116, 109, 98, 106, 112, 105, 96, 94, 86, 76, 90, 108, 112, 118, 112, 94, 91, 97, 95, 95, 100, 95, 82, 71, 68, 75, 82, 82, 83, 86, 79, 74, 76, 74, 72, 73, 76, 81, 81, 79, 77, 75, 79, 84, 84, 87, 85, 79, 80, 78, 76, 78, 77, 79, 76, 71, 68, 64, 64, 63, 59, 58, 56, 56, 56, 54, 54, 57, 58, 57, 58, 58, 59, 63, 63, 63, 65, 62, 58, 58, 54, 50, 52, 49, 49, 51, 48, 41, 34, 34, 36, 38, 43, 39, 33, 33, 38, 44, 41, 43, 49, 50, 48, 44, 44, 42, 46, 59, 66, 66, 56, 56, 59, 52, 61, 71, 63, 51, 38, 29, 39, 57, 57, 62, 70, 55, 54, 68, 67, 56, 59, 74, 67, 57, 52, 36, 40, 67, 91, 87, 64, 46, 47, 66, 81, 93, 89, 57, 45, 58, 56, 61, 74, 61, 72, 92, 71, 83, 99, 78, 57, 40, 67, 81, 74, 93, 93, 94, 85, 74, 89, 68, 58, 65, 65, 104, 123, 91, 69, 74, 80, 93, 90, 63, 103, 148, 120, 77, 53, 85, 100, 86, 107, 91, 97, 131, 78, 68, 128, 120, 85, 67, 86, 128, 107, 109, 139, 90, 94, 139, 103, 82, 107, 121, 114, 108, 122, 106, 90, 125, 146, 117, 81, 113, 152, 94, 90, 153, 131, 120, 129, 100, 117, 137, 127, 129, 153, 143, 80, 89, 146, 172, 168, 110, 94, 120, 132, 150, 167, 180, 121, 91, 149, 151, 146, 154, 140, 108, 126, 192, 160, 159, 159, 104, 157, 145, 146, 200, 160, 177, 125, 104, 218, 181, 121, 121, 125, 187, 207, 150, 138, 203, 173, 105, 144, 195, 214, 172, 145, 146, 154, 227, 192, 134, 132, 135, 245, 216, 118, 173, 161, 153, 194, 180, 168, 177, 206, 182, 140, 153, 183, 189, 158, 196, 215, 144, 175, 190, 149, 217, 212, 135, 165, 188, 203, 196, 122, 160, 225, 196, 186, 176, 178, 195, 188, 181, 158, 182, 226, 176, 144, 177, 175, 196, 225, 150, 173, 255, 152, 129, 214, 192, 172, 148, 175, 251, 178, 113, 185, 215, 172, 180, 200, 167, 178, 173, 144, 192, 212, 185, 146, 166, 199, 142, 189, 193, 124, 210, 171, 137, 219, 153, 158, 183, 182, 220, 136, 149, 186, 151, 189, 155, 155, 198, 159, 139, 171, 225, 163, 131, 166, 136, 208, 161, 123, 253, 145, 113, 205, 172, 171, 104, 185, 255, 96, 115, 157, 175, 229, 125, 144, 199, 134, 126, 189, 229, 132, 116, 149, 158, 236, 136, 132, 209, 101, 166, 216, 149, 104, 97, 255, 220, 73, 118, 166, 221, 169, 104, 166, 159, 125, 146, 199, 190, 142, 123, 113, 202, 212, 127, 138, 132, 148, 202, 193, 123, 78, 185, 255, 177, 79, 109, 210, 173, 95, 146, 203, 161, 84, 131, 255, 234, 55, 60, 204, 232, 161, 91, 105, 132, 147, 224, 202, 122, 113, 137, 195, 158, 103, 151, 144, 123, 164, 195, 163, 92, 90, 187, 255, 162, 38, 73, 167, 225, 195, 104, 79, 95, 156, 230, 185, 121, 111, 111, 153, 175, 149, 144, 144, 143, 160, 157, 120, 94, 124, 181, 198, 160, 108, 74, 94, 170, 210, 172, 122, 99, 98, 130, 165, 165, 154, 135, 110, 119, 138, 143, 141, 130, 126, 134, 138, 130, 127, 126, 127, 138, 131, 130, 141, 130, 123, 122, 126, 136, 134, 129, 130, 129, 124, 130, 133, 127, 130, 126, 128, 131, 126, 130, 129, 126, 129, 127, 126, 126, 127, 126, 128, 127, 122, 126, 129, 126, 124, 127, 125, 123, 126, 126, 128, 125, 121, 127, 128, 128, 125, 124, 125, 125, 130, 125, 124, 128, 122, 128, 131, 128, 128, 124, 123, 124, 126, 126, 126, 128, 126, 127, 122, 123, 128, 123, 127, 126, 121, 128, 123, 122, 130, 127, 127, 128, 123, 124, 129, 130, 125, 122, 126, 126, 128, 127, 122, 128, 126, 125, 130, 125, 128, 124, 121, 129, 123, 123, 126, 122, 125, 123, 123, 123, 120, 126, 123, 118, 125, 122, 124, 122, 114, 128, 126, 113, 125, 123, 116, 117, 115, 123, 122, 118, 116, 110, 118, 125, 119, 110, 112, 122, 116, 108, 111, 113, 113, 112, 113, 114, 114, 112, 110, 109, 108, 109, 110, 110, 109, 109, 109, 108, 106, 106, 106, 106, 105, 104, 103, 103, 103, 102, 101, 101, 102, 100, 100, 100, 100, 100, 99, 99, 99, 98, 99, 98, 99, 98, 96, 96, 97, 96, 97, 97, 96, 98, 100, 101, 100, 97, 98, 98, 98, 97, 97, 106, 107, 97, 98, 106, 107, 98, 93, 100, 103, 103, 101, 97, 98, 98, 105, 106, 93, 104, 109, 94, 103, 105, 100, 104, 100, 105, 109, 104, 107, 108, 110, 110, 110, 111, 108, 108, 110, 114, 110, 107, 115, 110, 109, 114, 106, 110, 112, 104, 106, 110, 108, 107, 108, 105, 107, 105, 102, 111, 102, 101, 111, 101, 107, 106, 100, 112, 102, 100, 107, 102, 105, 101, 103, 107, 101, 103, 101, 102, 101, 99, 103, 96, 99, 102, 97, 99, 99, 101, 99, 96, 98, 96, 98, 98, 101, 99, 93, 98, 94, 95, 96, 90, 96, 92, 92, 94, 87, 94, 91, 91, 94, 89, 96, 95, 93, 94, 91, 94, 91, 95, 92, 91, 98, 92, 94, 97, 95, 93, 93, 99, 91, 95, 100, 95, 102, 95, 95, 100, 104, 105, 95, 107, 103, 100, 112, 100, 111, 111, 100, 114, 108, 112, 115, 110, 116, 114, 122, 117, 116, 118, 110, 122, 122, 124, 130, 125, 130, 119, 118, 118, 120, 131, 125, 143, 140, 130, 140, 121, 129, 126, 124, 148, 134, 149, 151, 136, 142, 127, 146, 154, 152, 152, 130, 151, 142, 130, 165, 166, 170, 170, 159, 133, 100, 117, 127, 160, 215, 216, 198, 145, 79, 77, 118, 162, 199, 216, 193, 151, 106, 92, 132, 163, 191, 198, 149, 131, 151, 158, 166, 170, 166, 134, 95, 112, 152, 176, 196, 198, 158, 77, 62, 116, 123, 181, 251, 177, 97, 55, 33, 120, 225, 234, 165, 65, 34, 109, 167, 165, 142, 84, 80, 127, 128, 104, 104, 161, 153, 79, 81, 103, 146, 182, 145, 86, 44, 82, 79, 63, 162, 177, 138, 62, 0, 91, 221, 203, 92, 0, 51, 149, 152, 89, 23, 75, 152, 134, 33, 10, 124, 183, 160, 53, 0, 91, 150, 126, 82, 33, 64, 80, 76, 129, 148, 75, 10, 55, 112, 131, 128, 72, 40, 60, 102, 119, 61, 55, 144, 149, 60, 34, 47, 121, 233, 114, 0, 63, 138, 143, 148, 27, 61, 177, 53, 68, 188, 88, 50, 68, 52, 127, 187, 151, 46, 55, 155, 153, 100, 82, 169, 156, 48, 88, 74, 121, 247, 139, 27, 101, 188, 154, 131, 101, 96, 246, 125, 34, 222, 137, 100, 143, 91, 167, 183, 180, 109, 85, 199, 158, 142, 129, 142, 187, 114, 168, 131, 103, 237, 180, 143, 156, 122, 158, 186, 138, 132, 228, 131, 108, 244, 127, 133, 203, 138, 150, 151, 215, 203, 125, 145, 152, 185, 168, 170, 190, 143, 181, 206, 163, 111, 167, 255, 180, 121, 127, 184, 213, 166, 143, 108, 221, 244, 91, 175, 226, 154, 160, 156, 152, 164, 220, 215, 145, 147, 180, 182, 168, 184, 158, 159, 197, 172, 213, 160, 78, 177, 215, 202, 171, 143, 159, 172, 238, 173, 113, 208, 163, 131, 211, 205, 155, 140, 168, 162, 140, 165, 192, 221, 191, 135, 161, 184, 192, 183, 136, 159, 162, 145, 230, 246, 137, 76, 135, 183, 197, 243, 152, 102, 180, 157, 205, 221, 160, 175, 100, 113, 203, 193, 190, 131, 154, 229, 161, 130, 128, 133, 187, 196, 216, 175, 79, 137, 212, 185, 181, 183, 153, 128, 155, 163, 120, 172, 213, 172, 187, 183, 144, 114, 117, 186, 191, 164, 185, 165, 145, 144, 112, 146, 219, 214, 183, 161, 152, 137, 111, 139, 141, 144, 216, 209, 157, 147, 125, 96, 110, 166, 199, 190, 157, 145, 160, 159, 153, 132, 133, 137, 148, 182, 155, 164, 178, 131, 131, 117, 149, 206, 160, 118, 124, 157, 181, 194, 166, 122, 145, 135, 161, 185, 124, 158, 170, 158, 178, 119, 134, 157, 159, 213, 158, 116, 160, 178, 189, 160, 138, 167, 169, 139, 114, 126, 161, 172, 182, 193, 151, 113, 135, 178, 206, 163, 132, 171, 162, 151, 161, 145, 153, 148, 122, 137, 182, 209, 201, 185, 148, 107, 110, 141, 165, 140, 124, 138, 124, 131, 142, 152, 175, 155, 144, 126, 83, 99, 116, 114, 124, 133, 152, 159, 144, 132, 142, 158, 152, 142, 140, 140, 136, 119, 115, 132, 128, 101, 103, 120, 123, 135, 154, 162, 167, 159, 143, 138, 133, 120, 133, 149, 138, 123, 111, 110, 118, 124, 130, 131, 127, 118, 114, 120, 124, 127, 123, 121, 127, 131, 135, 136, 137, 142, 147, 152, 157, 161, 158, 149, 143, 137, 131, 125, 125, 126, 118, 117, 115, 111, 110, 109, 109, 110, 107, 103, 103, 107, 105, 106, 108, 107, 107, 106, 110, 109, 106, 108, 110, 111, 108, 111, 112, 108, 114, 116, 115, 111, 100, 91, 81, 73, 66, 65, 68, 65, 63, 60, 63, 71, 71, 65, 63, 74, 84, 85, 75, 69, 70, 72, 84, 98, 104, 86, 70, 92, 99, 96, 107, 94, 69, 52, 47, 50, 43, 64, 91, 70, 67, 93, 94, 91, 92, 91, 79, 59, 76, 83, 59, 43, 42, 58, 48, 56, 106, 110, 99, 83, 54, 53, 61, 67, 75, 80, 50, 42, 115, 142, 117, 78, 22, 39, 77, 74, 74, 81, 90, 76, 83, 115, 58, 25, 107, 125, 75, 63, 45, 69, 124, 96, 77, 125, 106, 48, 90, 125, 67, 46, 86, 116, 100, 75, 103, 104, 62, 79, 125, 123, 72, 55, 128, 133, 38, 70, 139, 110, 112, 92, 69, 104, 113, 117, 107, 135, 128, 28, 56, 129, 160, 161, 74, 53, 85, 114, 139, 149, 150, 50, 29, 126, 127, 114, 130, 98, 44, 101, 161, 121, 123, 70, 60, 116, 88, 131, 138, 119, 95, 26, 163, 186, 59, 76, 61, 135, 180, 63, 97, 155, 80, 40, 124, 181, 128, 98, 55, 70, 161, 135, 79, 46, 80, 200, 143, 54, 105, 97, 116, 147, 72, 95, 166, 129, 75, 73, 124, 104, 99, 171, 96, 77, 126, 77, 146, 135, 49, 111, 127, 141, 88, 31, 150, 151, 97, 112, 98, 106, 110, 111, 94, 139, 144, 48, 98, 107, 118, 158, 52, 145, 160, 15, 116, 149, 95, 72, 110, 188, 74, 63, 151, 113, 105, 103, 115, 122, 106, 100, 132, 160, 75, 109, 140, 74, 146, 114, 95, 152, 94, 110, 120, 104, 128, 146, 137, 77, 111, 128, 113, 116, 99, 159, 99, 85, 182, 115, 102, 97, 114, 161, 81, 129, 156, 77, 126, 160, 92, 81, 185, 151, 58, 104, 148, 151, 91, 124, 157, 57, 143, 194, 98, 82, 104, 169, 137, 108, 151, 98, 138, 168, 69, 92, 189, 153, 63, 111, 175, 125, 99, 140, 136, 97, 134, 165, 124, 102, 135, 168, 130, 108, 119, 131, 174, 132, 84, 154, 192, 114, 86, 171, 139, 86, 161, 155, 94, 132, 205, 132, 53, 161, 186, 111, 110, 113, 142, 171, 140, 104, 133, 158, 123, 132, 135, 120, 154, 154, 116, 113, 167, 171, 97, 105, 168, 170, 131, 105, 128, 161, 156, 130, 122, 135, 150, 147, 132, 140, 151, 141, 122, 131, 161, 155, 130, 120, 139, 163, 145, 127, 130, 147, 156, 142, 137, 137, 139, 145, 143, 142, 142, 146, 142, 139, 144, 142, 146, 141, 140, 144, 142, 146, 141, 140, 144, 142, 144, 141, 143, 142, 141, 144, 141, 143, 142, 142, 144, 141, 143, 141, 143, 142, 141, 143, 141, 144, 142, 141, 142, 142, 143, 140, 143, 142, 140, 143, 142, 143, 141, 141, 144, 140, 141, 141, 141, 140, 140, 141, 140, 140, 141, 139, 140, 140, 141, 139, 140, 140, 139, 140, 141, 140, 138, 140, 140, 139, 141, 139, 140, 139, 139, 140, 139, 139, 139, 139, 139, 139, 140, 138, 139, 139, 139, 139, 138, 139, 138, 138, 139, 138, 139, 138, 138, 138, 138, 137, 137, 139, 137, 137, 138, 137, 137, 137, 138, 138, 137, 138, 137, 137, 137, 137, 137, 137, 138, 137, 137, 137, 137, 137, 138, 137, 136, 136, 137, 137, 136, 137, 136, 136, 136, 136, 136, 136, 136, 136, 135, 136, 137, 136, 135, 136, 136, 136, 136, 135, 136, 135, 136, 136, 136, 135, 134, 136, 136, 135, 135, 136, 135, 135, 136, 135, 134, 135, 135, 134, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 133, 134, 135, 134, 134, 134, 134, 134, 134, 134, 133, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 133, 133, 133, 134, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 132, 133, 133, 132, 133, 133, 133, 132, 133, 132, 132, 133, 132, 132, 133, 133, 132, 132, 133, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 131, 132, 131, 131, 132, 131, 131, 132, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 130, 131, 131, 130, 131, 130, 131, 130, 131, 130, 130, 131, 130, 131, 130, 131, 130, 131, 131, 130, 130, 131, 130, 131, 131, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
};

// Countdown Sound effect for second (e.g, 3,2,1..)
const unsigned char secondCount[] PROGMEM = {
129, 130, 130, 132, 132, 134, 137, 139, 142, 144, 147, 150, 154, 157, 160, 164, 168, 173, 175, 181, 185, 187, 196, 195, 207, 198, 137, 103, 93, 78, 69, 55, 50, 49, 48, 53, 54, 57, 59, 62, 67, 68, 72, 75, 78, 81, 84, 88, 90, 95, 99, 102, 107, 110, 114, 116, 120, 126, 129, 133, 136, 140, 144, 149, 154, 156, 161, 165, 168, 172, 176, 182, 184, 190, 194, 197, 202, 203, 211, 214, 218, 223, 224, 234, 230, 244, 238, 150, 96, 84, 56, 46, 34, 26, 28, 28, 35, 37, 43, 47, 48, 56, 59, 64, 67, 69, 76, 79, 83, 87, 91, 95, 99, 105, 107, 111, 115, 120, 124, 127, 134, 137, 140, 147, 150, 155, 157, 161, 164, 169, 175, 178, 185, 186, 191, 196, 198, 205, 207, 212, 216, 220, 228, 226, 236, 234, 243, 249, 170, 97, 78, 55, 47, 36, 25, 27, 27, 33, 37, 42, 48, 49, 54, 58, 63, 65, 69, 75, 76, 81, 86, 91, 96, 98, 104, 107, 111, 115, 118, 123, 127, 132, 135, 140, 145, 148, 154, 156, 161, 165, 169, 174, 177, 184, 186, 190, 195, 195, 204, 207, 213, 217, 218, 230, 228, 236, 236, 240, 255, 178, 93, 79, 56, 43, 36, 23, 27, 27, 32, 36, 41, 48, 48, 53, 58, 62, 66, 69, 74, 75, 82, 88, 89, 95, 98, 103, 107, 112, 115, 118, 124, 126, 131, 137, 140, 145, 147, 153, 154, 158, 166, 168, 175, 179, 183, 187, 188, 193, 196, 203, 209, 212, 217, 219, 226, 228, 233, 236, 238, 250, 189, 101, 77, 59, 44, 39, 26, 27, 28, 29, 34, 39, 46, 48, 52, 56, 60, 64, 66, 72, 77, 82, 86, 90, 97, 99, 104, 108, 112, 116, 119, 123, 125, 132, 136, 139, 146, 148, 152, 156, 160, 167, 168, 174, 176, 181, 187, 190, 195, 197, 202, 206, 212, 219, 217, 224, 226, 231, 238, 230, 246, 202, 105, 77, 65, 46, 40, 27, 27, 28, 31, 36, 37, 43, 45, 49, 55, 58, 64, 67, 72, 75, 81, 89, 92, 95, 99, 101, 107, 111, 115, 121, 125, 127, 132, 135, 139, 144, 147, 153, 155, 160, 166, 168, 174, 177, 181, 187, 188, 196, 198, 203, 208, 212, 220, 220, 225, 226, 230, 231, 224, 244, 205, 110, 79, 63, 45, 40, 25, 24, 26, 28, 35, 39, 46, 46, 52, 57, 57, 65, 67, 72, 79, 82, 89, 91, 96, 100, 102, 107, 109, 115, 120, 124, 127, 130, 135, 139, 143, 148, 153, 157, 161, 166, 169, 176, 179, 181, 188, 187, 193, 199, 202, 207, 210, 216, 217, 224, 226, 222, 228, 223, 237, 218, 125, 79, 69, 48, 44, 31, 26, 29, 30, 36, 38, 44, 47, 50, 56, 59, 66, 69, 72, 79, 81, 88, 91, 94, 100, 103, 108, 112, 116, 119, 124, 128, 131, 136, 139, 143, 148, 152, 156, 163, 166, 168, 175, 179, 181, 186, 188, 195, 197, 200, 205, 209, 217, 220, 223, 219, 218, 226, 221, 237, 222, 132, 81, 71, 51, 44, 32, 25, 27, 30, 37, 39, 42, 45, 50, 57, 61, 65, 67, 70, 77, 82, 86, 89, 94, 98, 103, 107, 110, 115, 118, 123, 128, 131, 137, 141, 146, 150, 152, 159, 163, 167, 170, 174, 178, 180, 184, 185, 190, 194, 198, 204, 206, 213, 212, 211, 215, 215, 225, 221, 231, 231, 147, 83, 71, 51, 43, 34, 26, 28, 30, 38, 40, 44, 50, 51, 57, 61, 65, 69, 73, 79, 81, 84, 88, 94, 98, 101, 107, 110, 114, 118, 122, 130, 131, 137, 143, 144, 147, 150, 158, 163, 167, 171, 173, 178, 181, 185, 187, 191, 196, 199, 205, 207, 208, 208, 211, 215, 212, 220, 220, 230, 236, 159, 87, 73, 52, 44, 37, 26, 29, 29, 36, 40, 44, 49, 50, 58, 61, 64, 70, 74, 80, 82, 85, 89, 94, 99, 102, 109, 111, 114, 119, 123, 128, 131, 136, 140, 143, 148, 152, 157, 161, 166, 170, 173, 177, 181, 187, 190, 192, 195, 199, 205, 201, 202, 206, 208, 214, 211, 219, 221, 224, 238, 175, 93, 72, 54, 44, 39, 28, 29, 29, 37, 43, 45, 52, 53, 59, 62, 65, 71, 72, 77, 80, 83, 88, 91, 96, 100, 103, 108, 113, 117, 121, 125, 130, 136, 139, 143, 148, 152, 158, 160, 165, 170, 171, 179, 182, 186, 191, 193, 199, 199, 199, 199, 202, 207, 208, 215, 214, 218, 223, 225, 241, 188, 100, 77, 60, 44, 42, 30, 30, 32, 37, 43, 46, 51, 51, 57, 62, 64, 69, 70, 74, 76, 80, 86, 89, 94, 97, 102, 107, 109, 115, 119, 124, 129, 133, 139, 143, 146, 149, 155, 159, 163, 167, 171, 177, 178, 184, 190, 193, 196, 190, 195, 200, 202, 208, 208, 214, 215, 220, 226, 224, 245, 200, 107, 81, 66, 48, 44, 30, 30, 30, 35, 44, 45, 50, 50, 54, 60, 62, 66, 68, 74, 76, 79, 86, 88, 94, 98, 102, 107, 110, 116, 119, 126, 131, 136, 140, 141, 146, 149, 154, 157, 161, 169, 171, 178, 182, 184, 190, 188, 190, 191, 194, 199, 200, 206, 208, 214, 216, 220, 229, 225, 244, 220, 126, 84, 69, 50, 44, 33, 28, 30, 34, 40, 45, 49, 50, 54, 61, 62, 66, 69, 73, 77, 80, 85, 87, 92, 97, 102, 106, 109, 114, 118, 123, 128, 133, 138, 141, 146, 148, 152, 156, 160, 166, 170, 176, 180, 184, 187, 182, 187, 190, 194, 196, 198, 206, 210, 211, 218, 219, 227, 227, 235, 229, 138, 86, 72, 51, 47, 34, 29, 31, 33, 43, 43, 50, 52, 56, 62, 67, 78, 80, 90, 91, 97, 102, 105, 108, 113, 117, 119, 118, 122, 126, 125, 129, 130, 131, 132, 131, 132, 131, 130, 132, 133, 135, 135, 136, 136, 135, 135, 136, 135, 136, 135, 134, 134, 134, 132, 132, 132, 133, 133, 131, 131, 128, 125, 124, 124, 124, 128, 126, 126, 126, 130, 130, 130, 129, 129, 129, 128, 129, 126, 126, 124, 127, 126, 125, 125, 127, 128, 127, 127, 125, 125, 126, 128, 128, 128, 128, 127, 127, 127, 125, 124, 128, 130, 130, 132, 132, 132, 131, 131, 131, 130, 130, 131, 131, 130, 128, 127, 128, 128, 127, 129, 128, 126, 126, 124, 122, 124, 125, 127, 127, 127, 128, 130, 131, 131, 131, 129, 127, 127, 126, 125, 125, 122, 123, 124, 123, 123, 126, 124, 123, 125, 125, 127, 127, 128, 128, 129, 128, 126, 126, 124, 122, 124, 126, 125, 126, 127, 124, 125, 125, 124, 125, 124, 125, 127, 126, 128, 129, 128, 130, 130, 132, 133, 132, 130, 128, 127, 127, 129, 129, 128, 127, 127, 128, 129, 127, 125, 125, 124, 124, 124, 123, 123, 123, 123, 123, 123, 125, 126, 124, 123, 123, 125, 126, 126, 126, 126, 126, 127, 129, 129, 127, 127, 128, 130, 133, 133, 133, 133, 133, 131, 131, 131, 130, 130, 131, 131, 131, 131, 130, 131, 131, 131, 132, 131, 129, 127, 127, 128, 128, 128, 127, 126, 129, 131, 130, 128, 127, 127, 127, 128, 127, 126, 126, 125, 126, 126, 126, 127, 128, 128, 126, 125, 125, 125, 125, 126, 125, 125, 125, 126,
};

// Countdown Sound effect for go (e.g., ...GO)
const unsigned char goCount[] PROGMEM = {
127, 127, 127, 127, 128, 127, 126, 127, 128, 128, 128, 128, 128, 127, 128, 128, 128, 129, 129, 128, 127, 127, 127, 128, 128, 130, 131, 129, 128, 128, 127, 127, 126, 125, 125, 124, 123, 123, 122, 123, 125, 127, 128, 126, 128, 130, 127, 125, 126, 126, 125, 125, 125, 125, 125, 124, 125, 127, 129, 128, 127, 129, 128, 127, 129, 129, 130, 131, 131, 130, 130, 129, 128, 127, 127, 126, 124, 124, 125, 126, 126, 127, 128, 129, 129, 129, 131, 130, 128, 129, 128, 127, 126, 125, 125, 126, 125, 125, 127, 128, 128, 128, 128, 128, 127, 126, 124, 125, 127, 127, 125, 126, 130, 130, 128, 127, 126, 126, 126, 126, 126, 127, 128, 128, 128, 128, 127, 127, 130, 129, 129, 130, 129, 129, 131, 132, 130, 129, 130, 131, 132, 131, 131, 130, 129, 127, 125, 126, 127, 129, 129, 129, 128, 128, 128, 128, 128, 127, 127, 127, 126, 127, 127, 128, 125, 124, 125, 126, 128, 127, 128, 130, 125, 125, 129, 125, 125, 127, 125, 127, 129, 129, 129, 128, 130, 132, 132, 131, 131, 131, 127, 129, 131, 130, 130, 128, 127, 128, 127, 126, 125, 125, 125, 127, 129, 129, 128, 128, 129, 129, 130, 129, 129, 130, 130, 129, 128, 129, 129, 128, 127, 125, 124, 124, 126, 127, 127, 125, 125, 126, 127, 128, 127, 126, 125, 127, 128, 126, 126, 129, 129, 128, 129, 129, 128, 127, 126, 126, 128, 130, 128, 128, 130, 129, 126, 122, 118, 113, 111, 109, 104, 104, 104, 102, 101, 103, 105, 106, 106, 109, 111, 109, 112, 117, 119, 119, 121, 124, 127, 133, 139, 141, 145, 152, 155, 157, 160, 163, 167, 170, 175, 181, 185, 190, 193, 198, 202, 209, 214, 220, 230, 223, 232, 224, 137, 71, 57, 36, 27, 25, 31, 39, 39, 45, 52, 60, 63, 66, 77, 82, 87, 90, 95, 105, 108, 116, 123, 127, 133, 136, 145, 151, 154, 161, 169, 175, 180, 191, 195, 200, 207, 211, 220, 221, 229, 229, 229, 248, 183, 80, 55, 38, 21, 22, 22, 33, 40, 47, 54, 56, 64, 69, 77, 83, 89, 99, 105, 110, 115, 124, 131, 135, 141, 146, 155, 162, 169, 176, 181, 190, 193, 202, 208, 213, 224, 222, 226, 225, 235, 242, 151, 67, 53, 28, 18, 24, 27, 37, 40, 48, 56, 62, 69, 75, 83, 88, 96, 102, 107, 114, 119, 126, 133, 140, 146, 153, 160, 167, 177, 181, 189, 196, 200, 205, 213, 221, 216, 224, 225, 233, 245, 157, 68, 55, 31, 19, 24, 30, 38, 43, 51, 55, 62, 68, 72, 81, 86, 95, 100, 108, 117, 122, 130, 136, 142, 149, 156, 163, 168, 178, 182, 188, 198, 205, 210, 215, 216, 215, 225, 224, 237, 235, 137, 65, 54, 28, 21, 26, 31, 37, 42, 53, 54, 63, 72, 73, 83, 88, 96, 102, 109, 118, 123, 129, 136, 144, 150, 156, 164, 167, 175, 185, 190, 195, 203, 207, 208, 212, 215, 224, 222, 240, 227, 119, 57, 50, 23, 22, 27, 32, 42, 46, 55, 58, 66, 72, 77, 86, 91, 99, 106, 111, 118, 126, 132, 136, 146, 150, 158, 166, 169, 178, 184, 190, 199, 202, 202, 206, 210, 216, 226, 223, 244, 215, 103, 56, 46, 21, 24, 25, 33, 43, 47, 54, 59, 71, 74, 80, 88, 92, 101, 105, 113, 121, 126, 134, 137, 146, 153, 160, 168, 172, 179, 186, 193, 198, 195, 200, 209, 210, 217, 224, 227, 245, 191, 85, 57, 40, 18, 26, 27, 37, 42, 46, 58, 60, 71, 76, 81, 90, 94, 104, 109, 115, 124, 127, 135, 141, 148, 154, 160, 168, 173, 180, 187, 189, 191, 194, 201, 208, 210, 221, 225, 233, 246, 170, 74, 55, 36, 22, 28, 27, 39, 44, 49, 58, 62, 73, 76, 84, 93, 97, 107, 111, 120, 126, 130, 138, 143, 151, 155, 162, 171, 174, 182, 184, 182, 189, 193, 200, 206, 211, 224, 224, 239, 242, 149, 66, 53, 30, 19, 26, 29, 40, 44, 51, 58, 63, 74, 78, 86, 95, 100, 110, 115, 123, 130, 136, 143, 147, 154, 159, 167, 174, 178, 180, 180, 183, 188, 191, 202, 207, 212, 224, 223, 241, 226, 124, 59, 49, 25, 20, 26, 32, 41, 47, 54, 61, 66, 74, 79, 86, 93, 98, 111, 115, 124, 131, 137, 144, 148, 155, 161, 169, 176, 175, 178, 181, 183, 190, 191, 201, 205, 213, 225, 226, 247, 209, 102, 57, 44, 20, 22, 28, 33, 39, 47, 54, 61, 68, 76, 83, 90, 97, 105, 113, 118, 127, 132, 139, 147, 155, 159, 168, 173, 172, 173, 176, 182, 183, 189, 193, 203, 205, 214, 223, 224, 246, 187, 83, 54, 35, 19, 22, 30, 34, 43, 49, 55, 63, 69, 77, 81, 91, 97, 107, 115, 124, 130, 138, 143, 147, 158, 161, 170, 169, 170, 173, 177, 183, 183, 192, 196, 205, 208, 216, 223, 228, 246, 163, 72, 51, 31, 20, 21, 31, 36, 47, 49, 57, 65, 71, 78, 85, 94, 99, 109, 115, 125, 131, 142, 147, 154, 160, 160, 165, 167, 166, 169, 178, 181, 183, 193, 195, 204, 212, 218, 224, 232, 239, 137, 63, 48, 28, 22, 23, 38, 40, 49, 51, 62, 68, 74, 77, 85, 96, 100, 110, 119, 128, 132, 139, 146, 157, 157, 155, 162, 165, 163, 172, 182, 183, 183, 195, 195, 206, 212, 220, 224, 236, 225, 110, 59, 47, 27, 21, 29, 40, 42, 52, 55, 65, 68, 78, 78, 89, 95, 102, 112, 121, 128, 134, 140, 146, 155, 150, 153, 162, 165, 165, 174, 181, 185, 189, 197, 198, 208, 212, 223, 225, 243, 211, 94, 59, 42, 24, 22, 31, 36, 41, 52, 56, 63, 69, 80, 81, 90, 98, 104, 113, 121, 128, 138, 141, 147, 150, 149, 154, 162, 165, 170, 180, 185, 190, 192, 200, 202, 212, 213, 224, 223, 245, 189, 79, 59, 35, 24, 24, 34, 37, 45, 53, 58, 62, 69, 77, 78, 90, 98, 105, 113, 123, 130, 137, 137, 142, 145, 147, 156, 165, 169, 175, 182, 189, 194, 199, 203, 208, 213, 216, 226, 229, 248, 166, 71, 58, 34, 25, 25, 33, 37, 45, 53, 58, 62, 71, 74, 77, 90, 98, 102, 114, 124, 128, 130, 129, 136, 140, 147, 155, 165, 171, 178, 187, 195, 197, 200, 204, 212, 218, 222, 229, 235, 244, 144, 67, 56, 30, 26, 25, 35, 37, 47, 56, 62, 68, 75, 79, 82, 94, 98, 104, 116, 123, 125, 126, 128, 134, 139, 144, 152, 163, 172, 180, 188, 195, 196, 203, 204, 212, 215, 223, 228, 240, 234, 124, 65, 52, 31, 27, 28, 38, 40, 50, 56, 62, 66, 75, 79, 85, 94, 100, 108, 119, 121, 121, 126, 129, 135, 138, 146, 153, 164, 170, 178, 189, 195, 197, 204, 204, 214, 218, 225, 229, 244, 224, 111, 65, 49, 31, 27, 30, 40, 42, 54, 58, 66, 71, 79, 81, 86, 95, 102, 107, 115, 115, 119, 124, 129, 134, 141, 147, 154, 163, 170, 179, 187, 194, 197, 205, 203, 215, 217, 227, 231, 249, 212, 100, 68, 47, 34, 27, 34, 39, 45, 56, 58, 68, 71, 80, 82, 89, 95, 102, 102, 111, 113, 119, 126, 130, 137, 145, 150, 158, 168, 173, 178, 188, 194, 196, 204, 207, 219, 219, 229, 233, 253, 196, 87, 62, 39, 29, 27, 37, 39, 47, 57, 61, 67, 69, 77, 85, 92, 99, 100, 99, 111, 113, 122, 126, 134, 142, 148, 149, 160, 172, 180, 186, 195, 197, 197, 206, 207, 219, 218, 230, 232, 250, 176, 77, 60, 35, 26, 23, 37, 37, 47, 55, 62, 69, 71, 79, 85, 90, 93, 93, 98, 110, 113, 122, 126, 135, 143, 148, 152, 164, 172, 181, 188, 199, 199, 202, 210, 212, 220, 222, 232, 236, 252, 161, 73, 58, 32, 24, 25, 35, 35, 47, 55, 64, 68, 74, 83, 89, 87, 90, 94, 101, 110, 112, 124, 128, 137, 140, 148, 153, 164, 172, 182, 187, 198, 198, 204, 212, 214, 220, 225, 235, 240, 249, 146, 72, 56, 30, 26, 25, 34, 34, 48, 55, 64, 67, 75, 84, 82, 84, 93, 97, 104, 111, 117, 125, 128, 136, 142, 149, 154, 166, 174, 181, 187, 198, 194, 202, 208, 213, 220, 229, 233, 242, 242, 130, 70, 56, 35, 29, 28, 34, 35, 48, 53, 61, 65, 76, 75, 75, 82, 90, 96, 105, 114, 121, 126, 128, 139, 145, 150, 156, 166, 173, 184, 191, 201, 197, 207, 209, 214, 220, 228, 230, 242, 233, 118, 70, 54, 34, 31, 29, 36, 38, 48, 55, 63, 65, 70, 70, 75, 80, 88, 96, 109, 117, 125, 128, 134, 141, 146, 153, 159, 167, 176, 185, 191, 200, 198, 208, 209, 217, 223, 231, 229, 247, 225, 108, 69, 50, 36, 30, 31, 38, 42, 49, 57, 62, 60, 67, 69, 75, 80, 91, 98, 110, 116, 122, 128, 134, 140, 149, 155, 161, 170, 179, 186, 195, 202, 198, 208, 208, 217, 220, 229, 227, 247, 210, 97, 67, 51, 37, 32, 38, 45, 44, 50, 59, 54, 55, 64, 67, 75, 80, 91, 99, 114, 119, 125, 131, 135, 142, 149, 154, 162, 171, 180, 188, 199, 202, 202, 210, 209, 218, 220, 232, 228, 251, 197, 88, 67, 45, 33, 32, 40, 43, 47, 56, 55, 50, 54, 61, 65, 74, 82, 93, 100, 113, 119, 126, 132, 138, 145, 153, 158, 167, 175, 185, 193, 202, 203, 205, 212, 213, 218, 219, 228, 227, 251, 183, 83, 66, 41, 32, 31, 39, 43, 47, 50, 51, 52, 57, 64, 71, 79, 87, 96, 102, 115, 118, 123, 130, 136, 142, 152, 159, 167, 176, 188, 196, 205, 204, 207, 214, 215, 221, 224, 232, 230, 245, 162, 73, 61, 36, 30, 27, 40, 41, 42, 45, 47, 48, 54, 63, 69, 76, 88, 98, 108, 119, 119, 126, 130, 136, 143, 153, 159, 169, 180, 191, 201, 206, 206, 212, 216, 218, 224, 231, 234, 235, 245, 144, 68, 58, 33, 28, 29, 39, 33, 40, 43, 45, 48, 59, 65, 72, 80, 89, 97, 108, 120, 121, 128, 132, 139, 143, 152, 158, 170, 178, 192, 200, 206, 206, 213, 216, 223, 227, 233, 236, 244, 240, 123, 69, 55, 29, 28, 28, 31, 29, 38, 39, 45, 49, 61, 67, 76, 80, 92, 102, 112, 119, 122, 130, 135, 141, 146, 155, 158, 169, 179, 192, 199, 204, 203, 211, 213, 224, 225, 235, 235, 249, 228, 108, 68, 46, 29, 27, 23, 27, 31, 38, 39, 48, 52, 64, 71, 80, 87, 99, 106, 116, 122, 127, 132, 137, 142, 149, 156, 162, 175, 181, 191, 196, 200, 203, 210, 212, 223, 227, 239, 234, 252, 210, 95, 67, 44, 30, 20, 22, 28, 31, 38, 42, 48, 53, 65, 71, 82, 87, 97, 107, 118, 123, 129, 132, 140, 145, 151, 157, 166, 176, 182, 194, 200, 199, 203, 211, 213, 224, 228, 240, 236, 255, 185, 81, 67, 37, 23, 15, 23, 25, 33, 41, 45, 50, 58, 66, 72, 81, 89, 100, 107, 118, 124, 129, 131, 141, 146, 154, 160, 170, 180, 187, 197, 200, 198, 206, 211, 215, 225, 231, 238, 240, 252, 154, 76, 62, 30, 22, 17, 26, 26, 37, 42, 47, 52, 61, 69, 77, 85, 93, 101, 111, 121, 125, 128, 134, 143, 146, 155, 160, 173, 179, 188, 199, 202, 200, 208, 209, 218, 222, 231, 235, 246, 240, 126, 71, 49, 23, 19, 21, 29, 29, 38, 45, 51, 55, 66, 73, 83, 89, 97, 105, 116, 122, 126, 130, 138, 142, 145, 153, 160, 172, 179, 189, 201, 201, 200, 209, 210, 220, 220, 234, 233, 252, 218, 100, 62, 36, 19, 18, 24, 30, 32, 42, 45, 48, 57, 69, 75, 84, 93, 102, 109, 120, 125, 129, 132, 142, 145, 150, 156, 163, 175, 182, 191, 204, 200, 202, 210, 212, 220, 223, 239, 236, 255, 181, 75, 56, 31, 22, 20, 27, 29, 37, 44, 46, 50, 58, 68, 75, 86, 96, 104, 112, 123, 128, 131, 136, 146, 147, 152, 157, 167, 179, 184, 194, 206, 201, 208, 212, 216, 221, 228, 239, 240, 247, 143, 64, 50, 25, 20, 21, 29, 30, 39, 41, 48, 51, 62, 71, 77, 86, 97, 105, 113, 124, 128, 132, 139, 147, 148, 155, 161, 169, 179, 186, 197, 206, 201, 212, 212, 219, 222, 233, 236, 242, 226, 109, 60, 43, 24, 20, 23, 29, 31, 39, 42, 50, 52, 63, 71, 79, 90, 101, 106, 118, 126, 130, 132, 142, 148, 150, 158, 164, 172, 184, 191, 202, 206, 204, 213, 213, 223, 223, 235, 230, 245, 196, 83, 57, 35, 23, 21, 28, 28, 32, 40, 44, 49, 53, 65, 73, 83, 95, 101, 106, 119, 126, 132, 135, 145, 148, 153, 161, 167, 176, 188, 194, 205, 205, 206, 212, 217, 224, 225, 232, 228, 242, 158, 67, 51, 26, 21, 22, 29, 29, 37, 42, 48, 50, 57, 68, 77, 84, 96, 103, 113, 123, 128, 134, 138, 145, 148, 156, 163, 169, 179, 190, 197, 209, 206, 212, 215, 221, 221, 224, 226, 232, 233, 124, 59, 43, 21, 20, 22, 30, 33, 38, 41, 49, 50, 59, 70, 80, 89, 101, 105, 118, 127, 133, 139, 142, 149, 152, 160, 165, 171, 183, 193, 200, 208, 207, 217, 214, 219, 215, 225, 223, 238, 211, 94, 56, 35, 20, 19, 24, 31, 36, 40, 45, 52, 53, 64, 73, 81, 90, 104, 107, 119, 128, 136, 139, 145, 149, 153, 161, 166, 172, 184, 192, 202, 207, 210, 217, 211, 214, 213, 227, 225, 244, 180, 71, 52, 29, 19, 18, 26, 30, 38, 41, 47, 53, 57, 67, 76, 85, 95, 107, 109, 123, 132, 137, 140, 149, 151, 157, 165, 168, 174, 187, 195, 205, 208, 213, 213, 208, 212, 219, 230, 229, 241, 147, 62, 49, 23, 18, 20, 28, 30, 39, 39, 48, 53, 60, 68, 78, 86, 99, 107, 111, 124, 133, 137, 142, 152, 152, 160, 167, 171, 178, 190, 198, 208, 206, 210, 207, 210, 213, 223, 228, 235, 231, 118, 58, 41, 21, 20, 23, 29, 32, 40, 41, 48, 52, 61, 67, 78, 88, 101, 108, 114, 125, 136, 138, 144, 152, 154, 162, 168, 173, 183, 194, 200, 208, 204, 207, 206, 213, 216, 228, 227, 242, 214, 95, 55, 35, 20, 18, 23, 29, 34, 40, 42, 52, 57, 62, 68, 81, 90, 103, 111, 118, 128, 140, 140, 147, 153, 156, 163, 168, 174, 185, 195, 199, 202, 199, 205, 206, 213, 218, 231, 227, 246, 188, 77, 52, 30, 21, 17, 23, 29, 38, 42, 45, 54, 60, 64, 72, 84, 94, 106, 111, 120, 132, 141, 137, 148, 154, 158, 164, 170, 175, 187, 192, 195, 198, 199, 204, 208, 215, 222, 232, 229, 245, 163, 68, 50, 28, 23, 19, 25, 30, 38, 42, 48, 55, 61, 65, 76, 87, 97, 106, 113, 123, 134, 140, 139, 152, 154, 158, 165, 171, 177, 186, 186, 192, 197, 202, 205, 212, 216, 226, 231, 234, 243, 143, 64, 48, 26, 22, 22, 31, 35, 40, 44, 49, 56, 63, 67, 78, 88, 99, 107, 116, 126, 137, 141, 143, 152, 154, 161, 167, 170, 175, 183, 183, 192, 197, 202, 203, 211, 215, 229, 230, 237, 234, 121, 58, 44, 26, 24, 23, 32, 39, 44, 46, 51, 59, 63, 65, 79, 90, 101, 108, 116, 126, 137, 141, 145, 154, 157, 163, 167, 167, 171, 179, 183, 191, 196, 202, 204, 214, 216, 227, 225, 240, 222, 107, 59, 43, 26, 25, 24, 34, 41, 44, 47, 53, 59, 63, 69, 82, 92, 103, 109, 118, 130, 141, 142, 148, 156, 158, 164, 165, 163, 171, 179, 184, 193, 197, 201, 204, 215, 214, 228, 226, 243, 211, 95, 55, 40, 27, 24, 25, 36, 42, 45, 50, 55, 60, 64, 71, 81, 92, 103, 109, 121, 132, 140, 143, 151, 156, 158, 159, 160, 162, 173, 178, 184, 193, 197, 201, 205, 214, 216, 230, 225, 244, 202, 86, 54, 39, 27, 24, 28, 38, 42, 47, 53, 58, 61, 65, 72, 85, 96, 105, 113, 124, 134, 142, 145, 151, 156, 156, 156, 157, 161, 171, 179, 186, 192, 196, 202, 206, 214, 219, 231, 227, 248, 195, 81, 55, 37, 26, 25, 29, 35, 41, 48, 52, 57, 59, 65, 73, 86, 96, 106, 112, 123, 135, 143, 145, 151, 152, 149, 151, 156, 162, 174, 181, 186, 194, 198, 203, 206, 215, 221, 232, 230, 249, 185, 78, 57, 37, 28, 26, 31, 35, 41, 47, 53, 58, 59, 65, 74, 85, 95, 106, 111, 125, 136, 142, 143, 148, 147, 146, 151, 157, 163, 176, 181, 189, 197, 198, 203, 208, 216, 220, 231, 230, 251, 180, 75, 55, 37, 28, 26, 32, 35, 42, 46, 52, 55, 59, 66, 76, 88, 98, 107, 114, 127, 135, 143, 143, 143, 144, 148, 151, 159, 166, 176, 183, 191, 194, 198, 204, 207, 215, 222, 230, 229, 248, 171, 71, 54, 37, 27, 25, 31, 36, 44, 47, 54, 58, 62, 67, 79, 90, 101, 109, 115, 128, 138, 143, 137, 140, 143, 147, 153, 161, 167, 179, 187, 191, 193, 200, 203, 206, 217, 223, 229, 231, 248, 164, 71, 56, 35, 27, 26, 32, 36, 45, 49, 56, 59, 62, 69, 82, 92, 102, 109, 117, 130, 133, 134, 132, 138, 141, 145, 152, 159, 167, 181, 186, 191, 196, 201, 203, 207, 216, 219, 227, 232, 246, 159, 71, 58, 35, 26, 27, 34, 38, 44, 47, 52, 58, 62, 70, 83, 92, 102, 108, 119, 128, 129, 131, 131, 136, 140, 147, 153, 162, 173, 183, 186, 194, 198, 201, 202, 208, 216, 220, 227, 232, 244, 154, 70, 57, 33, 26, 24, 32, 38, 46, 47, 52, 58, 59, 71, 85, 93, 102, 112, 119, 124, 127, 131, 131, 138, 142, 148, 155, 166, 175, 183, 189, 195, 197, 202, 203, 208, 217, 222, 227, 232, 244, 152, 70, 56, 31, 27, 24, 33, 37, 44, 46, 54, 56, 60, 75, 87, 94, 105, 112, 114, 122, 125, 129, 131, 141, 143, 151, 159, 168, 175, 184, 191, 195, 196, 201, 203, 208, 217, 222, 229, 235, 245, 142, 67, 56, 31, 26, 24, 36, 35, 43, 47, 55, 54, 64, 76, 86, 96, 106, 105, 111, 120, 122, 128, 131, 140, 142, 151, 158, 169, 177, 186, 192, 197, 197, 203, 204, 211, 217, 224, 229, 239, 242, 128, 68, 56, 31, 24, 27, 34, 34, 43, 47, 54, 54, 67, 77, 88, 96, 100, 102, 112, 118, 122, 128, 131, 139, 145, 152, 161, 172, 178, 187, 192, 198, 196, 204, 203, 212, 217, 227, 229, 241, 232, 116, 67, 54, 31, 25, 26, 35, 38, 45, 48, 52, 56, 71, 78, 86, 90, 95, 101, 112, 116, 122, 129, 132, 141, 145, 154, 166, 175, 181, 191, 195, 196, 197, 206, 206, 216, 219, 229, 228, 244, 224, 108, 68, 47, 29, 25, 28, 36, 37, 47, 50, 51, 58, 75, 76, 83, 89, 92, 99, 111, 116, 122, 126, 132, 141, 145, 153, 166, 176, 181, 192, 195, 198, 198, 205, 207, 218, 220, 232, 228, 249, 209, 94, 66, 44, 29, 23, 32, 36, 39, 47, 51, 52, 64, 75, 69, 82, 87, 94, 102, 113, 115, 124, 128, 134, 143, 147, 155, 171, 179, 183, 192, 196, 199, 200, 205, 211, 221, 221, 234, 231, 253, 188, 82, 65, 40, 27, 23, 34, 37, 41, 49, 52, 54, 65, 67, 68, 82, 88, 95, 107, 116, 117, 127, 129, 137, 144, 149, 156, 174, 178, 185, 195, 199, 199, 201, 208, 216, 221, 224, 237, 234, 253, 163, 73, 59, 33, 28, 25, 37, 34, 43, 50, 54, 55, 62, 62, 68, 83, 90, 99, 110, 117, 121, 128, 132, 139, 146, 150, 159, 176, 179, 187, 195, 200, 199, 205, 209, 218, 219, 230, 237, 239, 242, 132, 69, 54, 29, 24, 27, 37, 37, 48, 52, 51, 52, 61, 61, 73, 84, 93, 100, 112, 118, 123, 129, 133, 141, 146, 152, 160, 177, 179, 188, 196, 201, 201, 206, 210, 221, 223, 235, 236, 249, 227, 107, 68, 47, 26, 25, 30, 38, 39, 49, 46, 45, 52, 62, 64, 76, 86, 97, 103, 116, 119, 126, 131, 139, 144, 148, 152, 164, 177, 181, 189, 199, 203, 201, 208, 213, 225, 224, 238, 235, 255, 191, 83, 65, 39, 28, 24, 35, 36, 42, 44, 43, 46, 57, 63, 68, 81, 92, 102, 107, 119, 123, 129, 132, 141, 145, 148, 154, 168, 179, 182, 188, 201, 200, 201, 207, 216, 221, 225, 237, 240, 249, 149, 73, 61, 36, 26, 28, 38, 36, 40, 39, 43, 47, 59, 64, 75, 83, 97, 103, 110, 121, 126, 129, 133, 143, 145, 150, 156, 171, 178, 184, 191, 205, 200, 205, 210, 220, 219, 230, 236, 248, 232, 114, 70, 51, 32, 28, 34, 39, 34, 38, 39, 44, 49, 60, 69, 77, 84, 99, 103, 112, 120, 127, 130, 137, 144, 146, 151, 161, 172, 180, 187, 198, 206, 203, 211, 214, 222, 221, 239, 238, 254, 194, 87, 67, 41, 31, 27, 35, 30, 30, 36, 40, 44, 49, 63, 72, 79, 89, 103, 107, 116, 124, 132, 133, 141, 147, 152, 157, 166, 178, 186, 192, 205, 206, 208, 213, 219, 222, 226, 238, 241, 251, 151, 71, 56, 34, 29, 25, 31, 26, 33, 36, 42, 48, 56, 68, 76, 81, 96, 105, 111, 118, 127, 133, 135, 144, 150, 156, 159, 169, 181, 189, 196, 208, 207, 213, 216, 224, 223, 232, 236, 249, 226, 108, 64, 46, 31, 22, 20, 26, 27, 33, 36, 46, 52, 60, 72, 80, 87, 101, 105, 116, 121, 130, 134, 140, 146, 152, 158, 164, 175, 185, 191, 201, 209, 208, 215, 218, 228, 226, 238, 238, 254, 185, 82, 60, 35, 25, 15, 23, 26, 30, 33, 40, 48, 55, 63, 75, 82, 93, 103, 108, 121, 124, 131, 136, 145, 148, 156, 162, 167, 175, 187, 195, 206, 207, 212, 216, 222, 228, 229, 239, 244, 244, 139, 68, 49, 25, 19, 14, 26, 27, 31, 34, 42, 48, 56, 65, 77, 85, 96, 102, 111, 123, 127, 133, 141, 149, 151, 161, 166, 171, 179, 189, 199, 208, 209, 216, 217, 228, 228, 234, 236, 253, 222, 105, 59, 32, 16, 13, 18, 25, 27, 33, 36, 44, 50, 60, 68, 78, 90, 101, 106, 116, 124, 132, 136, 146, 149, 155, 164, 169, 175, 184, 192, 204, 209, 214, 218, 220, 230, 228, 236, 237, 254, 177, 72, 46, 21, 15, 12, 22, 26, 31, 36, 40, 47, 56, 66, 72, 82, 96, 102, 110, 119, 127, 135, 139, 150, 152, 159, 163, 169, 176, 186, 195, 207, 209, 216, 217, 224, 230, 230, 237, 242, 243, 131, 54, 36, 16, 14, 14, 27, 27, 36, 39, 45, 51, 63, 69, 76, 88, 101, 104, 112, 121, 130, 135, 140, 151, 152, 160, 165, 171, 176, 185, 197, 209, 210, 219, 219, 230, 232, 236, 238, 251, 221, 97, 52, 31, 16, 10, 16, 27, 29, 36, 38, 45, 50, 64, 69, 77, 90, 104, 107, 117, 124, 135, 138, 146, 153, 154, 162, 167, 172, 177, 187, 198, 207, 211, 221, 221, 233, 234, 241, 236, 251, 188, 75, 49, 26, 18, 13, 23, 29, 32, 34, 39, 47, 51, 63, 69, 80, 91, 102, 108, 116, 124, 136, 141, 150, 153, 158, 164, 170, 172, 183, 192, 202, 209, 216, 220, 222, 232, 233, 238, 235, 249, 157, 63, 43, 20, 17, 11, 24, 30, 36, 33, 41, 48, 53, 61, 68, 81, 94, 104, 114, 120, 128, 137, 142, 150, 154, 160, 164, 173, 175, 188, 195, 205, 210, 218, 221, 229, 235, 235, 235, 236, 241, 130, 59, 40, 17, 15, 13, 25, 27, 35, 33, 42, 47, 54, 60, 68, 84, 97, 104, 116, 123, 133, 141, 148, 154, 157, 161, 165, 175, 177, 189, 196, 211, 211, 218, 219, 228, 227, 230, 232, 239, 230, 110, 56, 34, 16, 13, 15, 25, 27, 36, 35, 42, 48, 58, 62, 71, 87, 100, 106, 119, 127, 138, 144, 151, 156, 159, 162, 168, 178, 180, 190, 197, 209, 209, 220, 219, 224, 218, 227, 228, 241, 219, 96, 53, 33, 19, 13, 17, 26, 29, 37, 38, 45, 51, 59, 61, 72, 87, 100, 105, 120, 128, 139, 144, 149, 154, 159, 163, 168, 177, 183, 192, 200, 210, 215, 224, 217, 220, 217, 229, 224, 242, 207, 87, 50, 32, 19, 12, 20, 28, 32, 36, 42, 51, 57, 62, 66, 78, 92, 103, 108, 121, 127, 139, 146, 152, 156, 157, 160, 166, 174, 182, 190, 200, 210, 216, 217, 212, 218, 216, 227, 228, 246, 197, 87, 49, 30, 18, 15, 19, 25, 33, 36, 42, 51, 59, 61, 69, 81, 92, 104, 111, 123, 131, 142, 146, 151, 155, 157, 161, 167, 173, 177, 180, 182, 185, 183, 174, 171, 169, 167, 169, 161, 166, 143, 106, 102, 99, 98, 103, 104, 105, 108, 107, 107, 111, 111, 107, 113, 119, 125, 129, 129, 133, 138, 141, 140, 138, 135, 130, 128, 128, 130, 132, 136, 138, 139, 136, 133, 134, 128, 129, 131, 128, 126, 124, 118, 119, 121, 122, 124, 122, 120, 120, 118, 116, 120, 116, 111, 116, 123, 128, 130, 130, 134, 140, 142, 139, 137, 133, 129, 127, 128, 130, 132, 137, 137, 137, 134, 131, 130, 125, 128, 130, 128, 123, 124, 120, 121, 125, 127, 126, 125, 124, 122, 121, 118, 120, 116, 115, 118, 125, 129, 131, 132, 134, 139, 140, 138, 135, 132, 129, 127, 129, 131, 131, 136, 135, 137, 134, 132, 130, 128, 129, 129, 127, 125, 122, 120, 123, 125, 127, 125, 124, 123, 121, 120, 120, 119, 115, 114, 117, 124, 127, 129, 131, 135, 139, 138, 136, 133, 130, 127, 126, 130, 131, 132, 137, 136, 135, 133, 132, 129, 127, 130, 129, 126, 125, 121, 120, 124, 125, 127, 125, 123, 123, 122, 120, 119, 117, 115, 114, 118, 125, 128, 132, 133, 136, 138, 138, 135, 132, 129, 128, 128, 131, 132, 134, 139, 136, 136, 134, 131, 127, 129, 131, 128, 126, 125, 121, 121, 123, 126, 126, 124, 122, 122, 121, 118, 118, 115, 112, 112, 118, 124, 127, 130, 132, 136, 139, 137, 134, 132, 129, 128, 128, 131, 134,
};

// ===== Magnetic Encoder  =====
//  Uncomment the line according to your sensor type
//AS5600L as5600;   //  use default Wire
AS5600 as5600;   //  use default Wire
//int magnetStatus = 0; //value of the status register (MD, ML, MH)
//int magnetStrength = 0;

// ===== EEPROM Configuration =====
const int addrHighScore = 0;      // EEPROM address for high score value
const int addrName = 20;          // EEPROM address for high score name
const int addrFlag = 100;         // EEPROM address for initialization flag
const uint8_t initFlag = 123;     // Unique value to mark EEPROM initialization

// ===== Hardware Pins =====
// Keeping the pins for the display on non pwm pins seems to fix issues with charcters sometimes not displaying correctly. Most likely some sort of timing issue.
const uint8_t CLK1 = 2;
const uint8_t DIO1 = 8; 
const uint8_t CLK2 = 4;
const uint8_t DIO2 = 13;
const uint8_t CLK3 = 12;
const uint8_t DIO3 = 7;
const uint8_t buttonPin = 6;      // Pushbutton pin
const uint8_t neoPixelPin = 10;   // LED strip control pin

// ===== NeoPixel Configuration =====
const uint8_t numPixels = 60;      // Number of pixels in the strip

// ===== Game Configuration =====
// LED spawning parameters
#define MAX_FLASHING_LEDS 3
#define LED_SPAWN_MIN 1000        // Min spawn delay in ms
#define LED_SPAWN_MAX 3000        // Max spawn delay in ms
const unsigned long normalLifespan = 4000;   // Regular LED lifespan
const unsigned long specialLifespan = 6000; // Special LED lifespan
const uint8_t colorCRarityDefault = 10;       // % chance for special colorC
const uint8_t maxSameColor = 3;              // Max times same color can appear in a row
const uint8_t aimedLedDeadzone = 3;          // Deadzone around aimed position. This applies either side, so total deadzone area is 2x this
const uint8_t existingLedsDeadzone = 2;      // Minimum spacing between LEDs. This applies either side, so total deadzone area is 2x this
const uint8_t commonScoring = 5;            // Base points when collecting a common led (colorA or colorB)
const uint8_t specialScoring = 15;           // Base points when collecting a special led (colorC)

// Timing Paramaters
const unsigned long clockwiseCheckInterval = 300;  // Rotation direction check interval
const unsigned long clockDuration = 60000;    // Game duration (60 seconds)
const unsigned long incorrectResetTime = 750;  // Time before resetting "passed" state. Fall back from resetting on led collection
const unsigned long debounceDelay = 50;        // Button debounce time

// Blinking Rate
const float initialBlinkProportion = 0.125f; // 12.5% of lifespan
const float blinkAcceleration = 0.72f;
const int minBlinkDelay = 30;

// Animation parameters
const uint16_t colorChangeInterval = 2000;    // Time between color changes in idle mode
const uint8_t blinkFrequency = 50;           // LED blink rate
const unsigned long displayUpdateInterval = 1500;  // Display update interval
const unsigned long printInterval = 100;       // Print interval for clock
// Animation Variable
uint8_t chase_q = 0; // Chase animation queue

// ===== Game State Variables =====
uint8_t combo = 1;                // Current combo multiplier
uint16_t score = 0;               // Current game score
uint16_t highScore;               // Current HighScore
int aimedAtLed;                   // Currently aimed at LED
bool gameStarted = false;         // Game state tracking
bool firstGame = true;            // First game indicator
bool timerRunning = true;         // Timer state
bool useAltColor;                 // Color alternation flag
bool displayToggle = true;        // Display alternation for blinking
uint8_t colorCRarity;             // Current rarity setting for colorC

// ===== Input Tracking =====
uint8_t buttonState;              // Current button state
uint8_t lastButtonState = LOW;    // Previous button state
unsigned long lastDebounceTime = 0;  // The last time the button output pin was toggled
float lastAngle;                  // Last recorded angle for direction detection
bool isClockwise;                 // Current rotation direction

// ===== Timing Variables =====
unsigned long randomSpawnRate = 0;     // Next random spawn time
unsigned long previousMillis = 0;      // Clock Previous Millis
unsigned long clockStartTime;          // Game start time
unsigned long previousPrint = 0;       // Last clock print time
unsigned long chasePreviousMillis = 0; // For theater chase animation
unsigned long lastDisplayUpdate = 0;   // For display updates
unsigned long lastBlinkUpdate = 0;     // For blinking effects

// ===== User Interface =====
char buf[5];                      // Buffer for formatting display numbers
char highScoreName[5];            // Storage for high score name
char alphabet[] = {
  '-', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 
  'M', 'N', '0', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'
};

// ===== Object Initialization =====
Adafruit_NeoPixel strip = Adafruit_NeoPixel(numPixels, neoPixelPin, NEO_GRB + NEO_KHZ800);
TM1637 scoreDisplay(CLK1, DIO1);
TM1637 comboDisplay(CLK2, DIO2);
TM1637 clockDisplay(CLK3, DIO3);


// ===== NeoPixel Colors =====
const uint32_t colorA = strip.Color(255, 0, 255); // Pink
const uint32_t colorB = strip.Color(0, 255, 255); // Cyan
const uint32_t colorC = strip.Color(57, 255, 20); // Green

// Structure for a flashing LED
struct FlashingLED {
  // State flags
  bool active = false;            // Whether this LED is currently active
  bool ledOn;                     // Current LED illumination state
  bool beenPassed;                // Whether LED has been passed but not collected
  bool passedClockwise;           // Direction LED was passed in
  bool hasLeftPixel;              // Whether we've moved away after passing
  
  // Position information
  uint8_t pixel;                  // LED position on the strip
  
  // Visual properties
  uint32_t color;                 // LED color
  
  // Timing variables
  unsigned long startTime;        // When LED was spawned
  unsigned long lastToggleTime;   // Last time LED was toggled
  unsigned long passedTime;       // When LED was passed
  int delayTime;                  // Current blinking interval
};

// Array of active LEDs
FlashingLED flashingLeds[MAX_FLASHING_LEDS];

enum ButtonEvent {  // Button event types
  BUTTON_NONE,      // No button event
  BUTTON_PRESS,     // Short press
  BUTTON_HOLD       // Long press/hold
};



void setup()
{
  Serial.begin(115200);

  uint8_t flag;
  EEPROM.get(addrFlag, flag);

  if (flag != initFlag) {                           // First run,  initialize high score
    char emptyName[5];
    for (int i = 0; i < 4; i++) {
      emptyName[i] = '-';
    }
    emptyName[4] = '\0';

    EEPROM.put(addrName, emptyName);
    EEPROM.put(addrHighScore, (uint16_t)0);
    EEPROM.put(addrFlag, initFlag);
    Serial.println("EEPROM initialized.");
  } else {
    Serial.println("EEPROM already initialized.");
  }

  EEPROM.get(addrHighScore, highScore);
  EEPROM.get(addrName, highScoreName);
  if (highScore > 9999) highScore = 9999;
  //led:
  randomSeed(analogRead(0));          // Gets random seed using random data from empty analog pin
  
  randomSpawnRate = 1000;             // First LED spawns after 1 second
  
  strip.begin();                    // Initialize the LED strip
  strip.clear();                   // Turn off all LEDs
  strip.show();                   // Update the strip

  Serial.println(__FILE__);
  Serial.print("AS5600_LIB_VERSION: ");
  Serial.println(AS5600_LIB_VERSION);
  Serial.println();

  Wire.begin();

  //as5600.begin(13);  //  set direction pin.
  as5600.setDirection(AS5600_CLOCK_WISE);  //  default, just be explicit.
  int b = as5600.isConnected();
  Serial.print("Connect: ");
  Serial.println(b);

  scoreDisplay.init();
  scoreDisplay.set(BRIGHT_TYPICAL);//BRIGHT_TYPICAL = 2,BRIGHT_DARKEST = 0,BRIGHTEST = 7;

  comboDisplay.init();
  comboDisplay.set(BRIGHT_TYPICAL);//BRIGHT_TYPICAL = 2,BRIGHT_DARKEST = 0,BRIGHTEST = 7;

  clockDisplay.init();
  clockDisplay.set(BRIGHT_TYPICAL);//BRIGHT_TYPICAL = 2,BRIGHT_DARKEST = 0,BRIGHTEST = 7;

  scoreDisplay.displayStr((char *)"lets");
  comboDisplay.displayStr((char *)"play");
  
  
  // Initialize the pushbutton pin as an input:
  pinMode(buttonPin, INPUT_PULLUP);

  buttonState = digitalRead(buttonPin);
  lastButtonState = buttonState;

  //checkMagnetPresence();
}


void loop() {
  if (!gameStarted) {
    theaterChase();
    displayIdle();

    switch (GetButtonState(3000)) {
      case BUTTON_PRESS:
        StartGame();
        break;
      case BUTTON_HOLD:
        ResetHighScore();
        break;
      default:
        break;
    }
  }

  if (gameStarted) {                                              // If game has started, run game logic
    unsigned long clockCurrentMillis = millis();
    unsigned long elapsed = clockCurrentMillis - clockStartTime;

    if (clockCurrentMillis - previousPrint >= printInterval) {    // Only print every printInterval ms
      previousPrint = clockCurrentMillis;

      float remaining = (clockDuration - elapsed) / 1000.0;
      if (remaining < 0) remaining = 0;


      sprintf(buf, "%-4d", combo);  
      comboDisplay.displayStr(buf);
      clockDisplay.displayNum(remaining,2);

      if (elapsed >= clockDuration) {                               // If time's up
        endGame();
      }
    }

    Game();

  }
}

ButtonEvent GetButtonState(unsigned long holdThreshold) {
  int reading = digitalRead(buttonPin);
  unsigned long currentMillis = millis();
  static unsigned long pressStartTime = 0;
  static bool holdEventFired = false;

  if (reading != lastButtonState) {
    lastDebounceTime = currentMillis;
  }

  if ((currentMillis - lastDebounceTime) > debounceDelay) {
    if (reading != buttonState) {
      buttonState = reading;

      if (buttonState == LOW) {
        // Button just pressed
        pressStartTime = currentMillis;
        holdEventFired = false;
      } else {
        // Button just released
        if (!holdEventFired && (currentMillis - pressStartTime < holdThreshold)) {
          return BUTTON_PRESS;
        }
      }
    }

    // While the button is still held
    if (buttonState == LOW && !holdEventFired && (currentMillis - pressStartTime >= holdThreshold)) {
      holdEventFired = true;
      return BUTTON_HOLD;
    }
  }

  lastButtonState = reading;
  return BUTTON_NONE;
}

void ResetHighScore(){
  highScore = 0;
  EEPROM.put(addrHighScore, highScore);
  startPlayback(secondCount, sizeof(secondCount));
}

void endGame() {
  strip.clear();  //turn off all LEDs
  strip.show();   //update the strip

  scoreDisplay.displayStr((char *)"Turn");
  comboDisplay.displayStr((char *)"0ver");

  delay(2000);
  if(score > highScore){
    NameInput();
    highScore = score;
    if (highScore > 9999) highScore = 9999;
    EEPROM.put(addrHighScore, highScore);
  }
  
  gameStarted = false;
  firstGame = false;
}

void NameInput() {

  char name[5] = { '\0' };  // Room for 4 letters + null terminator
  int lettersEntered = 0;
  int pixel;
  bool blinkToggle = true;

  bool displayToggle = true;

  clockDisplay.displayNum(0);
  comboDisplay.clearDisplay();

  for(int i = 0; i<10; i++){
    if(displayToggle){
      comboDisplay.displayStr((char *)"HiSc");
      scoreDisplay.displayStr((char *)"HiSc");
      clockDisplay.displayStr((char *)"HiSc");
    }else{
      comboDisplay.displayStr((char *)"    ");
      scoreDisplay.displayStr((char *)"    ");
      clockDisplay.displayStr((char *)"    ");
    }
    displayToggle = !displayToggle;
    delay(300);
  }

  scoreDisplay.displayStr((char *)"entr");
  clockDisplay.displayStr((char *)"plyr");

  while (lettersEntered < 4) {
    float angle = as5600.rawAngle() * AS5600_RAW_TO_DEGREES;
    int aimedAtLetter = (int)((angle / 360.0) * 27) % 27;
    char currentLetter = alphabet[aimedAtLetter];

    unsigned long currentMillis = millis();


    strip.setPixelColor(pixel, 0);
    strip.setPixelColor(pixel - 1, 0);  
    strip.setPixelColor(pixel + 1, 0);


    char displayBuffer[5];
    strncpy(displayBuffer, name, 4);  // Copy up to 4 chars
    displayBuffer[4] = '\0';          // Ensure null-termination


    if (currentMillis - lastBlinkUpdate >= 150) {
      lastBlinkUpdate = currentMillis;
      if (blinkToggle) {
        displayBuffer[lettersEntered] = currentLetter;
        displayBuffer[lettersEntered + 1] = '\0';  // Ensure null-termination
        comboDisplay.displayStr(displayBuffer);

      } else {
        displayBuffer[lettersEntered] = ' ';
        displayBuffer[lettersEntered + 1] = '\0';  // Ensure null-termination
        comboDisplay.displayStr(displayBuffer);
      }

      blinkToggle = !blinkToggle;
    }

    float ledsPerLetter = (float)numPixels / 27.0;  // 60/27 ≈ 2.22
    const int pixelOffset = -2;
    pixel = (numPixels - 1 - (int)(aimedAtLetter * ledsPerLetter) + pixelOffset) % numPixels;


    strip.setPixelColor(pixel, colorA);
    strip.setPixelColor(pixel - 1, colorA);
    strip.setPixelColor(pixel + 1, colorA);
    strip.show();

    switch (GetButtonState(1000)) {
      case BUTTON_PRESS:
        //lock in the current letter
        name[lettersEntered] = currentLetter;  // Temporarily add the currently selected letter at the current position
        lettersEntered++;
        name[lettersEntered] = '\0';  // Make sure null terminator is in place (after the last locked letter)
        //startPlayback(secondCount, sizeof(secondCount));  // Wanted to play a sound when locking in letter but for some reason it's very low pitched
        break;

      case BUTTON_HOLD:               // Hold to go back a letter
        if (lettersEntered > 0) {
          lettersEntered--;
          name[lettersEntered] = '\0';  // Clear that slot
        }
        break;

      default:
        break;
    }
  }

  strcpy(highScoreName, name);  // Copy the contents of name into highScoreName
  EEPROM.put(addrName, highScoreName);
}

void displayIdle(){
  unsigned long currentMillis = millis();

  if (currentMillis - lastDisplayUpdate >= displayUpdateInterval) {
    lastDisplayUpdate = currentMillis;
    scoreDisplay.clearDisplay();
    comboDisplay.clearDisplay();
    clockDisplay.displayNum(0);

    if(displayToggle){
      if(firstGame){
        scoreDisplay.displayStr((char *)"lets");
        comboDisplay.displayStr((char *)"play");
        clockDisplay.displayStr((char *)"    ");
      }else{
        scoreDisplay.displayStr((char *)"PrSc");
        comboDisplay.displayNum(score);
        clockDisplay.displayStr((char *)"    ");
      }
    }else{
      scoreDisplay.displayStr((char *)"HiSc");
      if(highScore <= 0){
        comboDisplay.displayStr((char *)"0000");
        clockDisplay.displayStr((char *)"----");
      }else{
        comboDisplay.displayNum(highScore);
        clockDisplay.displayStr(highScoreName);
      }
    }

    displayToggle = !displayToggle;

  }
}

void StartGame() {
  DifficultySelect();
  combo = 1;
  score = 0;
  
  memset(flashingLeds, 0, sizeof(flashingLeds));

  scoreDisplay.clearDisplay();
  comboDisplay.clearDisplay();
  clockDisplay.clearDisplay();

  for (int i = 3; i >= 1; i--) {
    useAltColor = !useAltColor;
    startPlayback(secondCount, sizeof(secondCount));
    scoreDisplay.displayNum(i);
    comboDisplay.displayNum(i);
    clockDisplay.displayNum(i);
    for (int i = 0; i < numPixels; i++) {
        strip.setPixelColor(i, useAltColor ? colorA : colorB);
      }
    strip.show();
    delay(1000);
  }

  strip.clear();  //turn off all LEDs
  strip.show();   //update the strip

  startPlayback(goCount, sizeof(goCount));
  scoreDisplay.displayStr((char *)"G0");
  comboDisplay.displayStr((char *)"G0");
  clockDisplay.displayStr((char *)"G0");
  delay(1500);
  scoreDisplay.displayStr((char *)"0000");
  gameStarted = true;
  clockStartTime = millis(); // Start the timer

}

void DifficultySelect() {
  bool selecting = true;
  strip.clear();
  strip.show();

  scoreDisplay.displayStr((char *)"diff");
  comboDisplay.displayStr((char *)"    ");
  clockDisplay.displayStr((char *)"    ");

  while (selecting) {
    float angle = as5600.rawAngle() * AS5600_RAW_TO_DEGREES;
    aimedAtLed = round((angle / 360.0) * 61) % 61;
    aimedAtLed = (numPixels)-aimedAtLed;  // Reverse direction
    aimedAtLed -= 1;

    // First, clear all LEDs
    for (int i = 0; i < numPixels; i++) {
      strip.setPixelColor(i, 0);  // Set all to off
    }
    
    bool selectedHalf = (aimedAtLed < numPixels / 2);

    uint8_t start;
    uint8_t end;
    uint32_t color;

    if(!selectedHalf){
      start = numPixels / 2;
      end = numPixels;
      color = colorA;
      clockDisplay.displayStr((char *)"   1");
    }else{
      start = 0;
      end = numPixels / 2;
      color = colorC;
      clockDisplay.displayStr((char *)"   2");
    }

    for (int i = start; i < end; i++) {
      strip.setPixelColor(i, color);
    }

    strip.show();
    switch (GetButtonState(3000)) {
      case BUTTON_PRESS:
        selecting = false;
        colorCRarity = selectedHalf ? colorCRarityDefault : 0;
        useAltColor = true;
        break;
      case BUTTON_HOLD:
        break;
      default:
        break;
    }
  }
}

void Game() {
  float angle = as5600.rawAngle() * AS5600_RAW_TO_DEGREES;

  aimedAtLed = round((angle / 360.0) * 61) % 61;
  aimedAtLed = (numPixels)-aimedAtLed;  // Reverse direction
  aimedAtLed -= 1;

  aimedAtLed = (aimedAtLed + numPixels) % numPixels; // Account for wrap around

  unsigned long currentMillis = millis();
  if (currentMillis - previousMillis > clockwiseCheckInterval) {
    previousMillis = currentMillis;
    lastAngle = angle;
  }

  float angleDelta = angle - lastAngle;

  if (angleDelta > 180.0) {
    angleDelta -= 360.0;
  } else if (angleDelta < -180.0) {
    angleDelta += 360.0;
  }

  isClockwise = angleDelta > 0;
  isClockwise = !isClockwise;

  // Serial.print("last Angle: ");
  // Serial.println(lastAngle);
  //Serial.print("current angle: ");
  //Serial.println(as5600.rawAngle() * AS5600_RAW_TO_DEGREES);
  //Serial.print("Clockwise: ");
  //Serial.println(isClockwise);
  updateFlashingLEDs();  //update all flashing LEDs

  static unsigned long lastTrigger = 0;
  if (millis() - lastTrigger > randomSpawnRate) {  //check if its time to spawn a new LED
    lastTrigger = millis();
    startFlashingLED(GetRandomPixel());  //start the LED flashing
  }

  randomSpawnRate = random(LED_SPAWN_MIN, LED_SPAWN_MAX);  //randomize the next spawn rate

  //Serial.print("aimed at led: ");
  //Serial.println(aimedAtLed);

  for (int i = 0; i < MAX_FLASHING_LEDS; i++) {
    if (!flashingLeds[i].active) continue;  //skip inactive LEDs

    int forward = (flashingLeds[i].pixel - aimedAtLed + numPixels) % numPixels;
    int backward = (aimedAtLed - flashingLeds[i].pixel + numPixels) % numPixels;
    int delta = min(forward, backward);

    if (delta<=1) {

      // Serial.print("aimed at led: ");
      // Serial.println(aimedAtLed);
      //Serial.print("led pixel: ");
      //Serial.println(flashingLeds[i].pixel);
      //Serial.println("HIT!!!!!!!!!!!!!!!!");

      if (flashingLeds[i].color == colorC) {
        if (!flashingLeds[i].beenPassed) {
          // First pass logic
          flashingLeds[i].beenPassed = true;
          flashingLeds[i].passedClockwise = isClockwise;
          flashingLeds[i].hasLeftPixel = false; // Reset this flag
          startPlayback(secondCount, sizeof(secondCount));
        } 

        if (flashingLeds[i].hasLeftPixel) {
          // Second pass logic, only if we have left the pixel since the first pass
          if (flashingLeds[i].passedClockwise == isClockwise) {
            CollectLed(i, specialScoring);
            startPlayback(goCount, sizeof(goCount));
          } else {
            TurnOffLed(i);
            startPlayback(miss, sizeof(miss));
          }
        }
        continue;
      }

      unsigned long currentTime = millis();
      if (currentTime - flashingLeds[i].passedTime >= incorrectResetTime) {
        flashingLeds[i].beenPassed = false;
        // Serial.println("beenPassed set to false");
      }

      bool correctDirection = (flashingLeds[i].color == colorA && isClockwise) || (flashingLeds[i].color == colorB && !isClockwise);

      if (correctDirection) {
        if (!flashingLeds[i].beenPassed) {
          CollectLed(i, commonScoring);
          startPlayback(hit, sizeof(hit));
          //Serial.println("Succesful collection");
        }else{
          //Serial.println("Been passed cant collect");
        }
      } else {
        //Serial.println("been passed = true");
        flashingLeds[i].beenPassed = true;
        flashingLeds[i].passedTime = millis();
      }
    }else{
      // This is the case when delta > 1 (not aiming at the LED)
      if (flashingLeds[i].color == colorC && flashingLeds[i].beenPassed && !flashingLeds[i].hasLeftPixel) {
        // Need to be at least 3 pixels away to count as "left"
        flashingLeds[i].hasLeftPixel = true;
      }
    }
  }
}

void CollectLed(int index, uint8_t baseScore) {
  for (int i = 0; i < MAX_FLASHING_LEDS; i++) {
    if (!flashingLeds[i].active) continue;

    if(flashingLeds[i].color != colorC){
      flashingLeds[i].beenPassed = false;
    }
  }

  if (combo < 16) {
    combo = combo * 2;
  }
  score = score + (baseScore * combo);
  if (score > 9999) score = 9999;
  sprintf(buf, "%04d", score);
  scoreDisplay.displayStr(buf);


  TurnOffLed(index);
}

void TurnOffLed(int index){
  flashingLeds[index].active = false;
  strip.setPixelColor(flashingLeds[index].pixel, 0);  //turn off LED
  flashingLeds[index].ledOn = false;
  flashingLeds[index].hasLeftPixel = false;
  flashingLeds[index].beenPassed = false;
  flashingLeds[index].passedClockwise = false;

  strip.show();
}

int GetRandomPixel() {  // Get a random pixel and make sure its not been used recently:
  uint8_t randomPixel;
  bool isTooClose;
  uint8_t attempts = 0;

  do {
    randomPixel = random(0, numPixels);  // Generate a random pixel
    isTooClose = false;

      // Check proximity to aimedAtLed (with wraparound)
      int distToAimed = abs((int)randomPixel - (int)aimedAtLed);
      int wrappedDistToActive = min(distToAimed, numPixels - distToAimed);
      if (wrappedDistToActive <= aimedLedDeadzone) {
        isTooClose = true;
      }

    // Check distance from all active flashing LEDs
    for (int i = 0; i < MAX_FLASHING_LEDS && !isTooClose; i++) {
      if (!flashingLeds[i].active) continue;

      int distToActive = abs((int)randomPixel - (int)flashingLeds[i].pixel);
      int wrappedDistToActive = min(distToActive, numPixels - distToActive);

      if (wrappedDistToActive <= existingLedsDeadzone) {
        isTooClose = true;
        break;
      }


    }
    attempts++;
    if (attempts > 10) break;  // Prevent infinite loops if LEDs are full
  } while (isTooClose);       // Loop until randomPixel is a pixel not too close to existing pixels/marker

  return randomPixel;
}

void startFlashingLED(int pixel) {
  static uint32_t lastColor = 0;
  static int sameColorCount = 0;

  for (int i = 0; i < MAX_FLASHING_LEDS; i++) {  
    if (!flashingLeds[i].active) {                // Find an inactive LED slot
      flashingLeds[i].active = true;
      flashingLeds[i].pixel = pixel;
      flashingLeds[i].startTime = millis();       // Record the start time
      flashingLeds[i].lastToggleTime = millis();  // Record the toggle time
      flashingLeds[i].ledOn = false;
      flashingLeds[i].beenPassed = false;
      flashingLeds[i].passedClockwise = false;
      flashingLeds[i].hasLeftPixel = false;

      flashingLeds[i].color = DetermineColor(CheckForInbetweenSpawn(pixel));
      flashingLeds[i].delayTime = (flashingLeds[i].color == colorC) ? specialLifespan : normalLifespan * initialBlinkProportion;
      return;
    }
  }
  // No available slots
}

bool CheckForInbetweenSpawn(int randomPixel){
  int nearestLed = -1;
  int minDistance = numPixels;

  // Find the nearest active LED in the specified direction
  for (int i = 0; i < MAX_FLASHING_LEDS; i++) {
      if (!flashingLeds[i].active) continue;
      int ledPos = flashingLeds[i].pixel;
      int distance = 0;

      if (isClockwise) {
        distance = (aimedAtLed - ledPos + numPixels) % numPixels;
        if (distance > 0 && distance < minDistance) {
          minDistance = distance;
          nearestLed = ledPos;
          //Serial.print("Nearest led: ");
          //Serial.println(nearestLed);
        }
      } else {
        distance = (ledPos - aimedAtLed + numPixels) % numPixels;
        if (distance > 0 && distance < minDistance) {
          minDistance = distance;
          nearestLed = ledPos;
          //Serial.print("Nearest led: ");
          //Serial.println(nearestLed);
        }
      }
  }

  // Get all LEDs between marker and nearest LED 
  bool found = false;
  if (nearestLed != -1) {
    int pos = aimedAtLed;
    while (true) {
      // Move in the correct direction
      pos = isClockwise ? (pos + 1) % numPixels : (pos - 1 + numPixels) % numPixels;
      if (pos == nearestLed) break;
      if (pos == randomPixel) {
        found = true;
        break;
      }
    }
  }
  return found;
}

uint32_t DetermineColor(bool foundInbetween) {
  uint8_t randVal = random(100);  // 0–99

  if (randVal < colorCRarity) {
    return colorC;
  }

  if(foundInbetween){
    return isClockwise ? colorB : colorA;
  }

  return (random(2) == 0) ? colorA : colorB;
}

void updateFlashingLEDs() {
  unsigned long currentTime = millis();                                 // Get current time

  for (int i = 0; i < MAX_FLASHING_LEDS; i++) {
    if (!flashingLeds[i].active) continue;                              // Skip inactive LEDs

    FlashingLED &led = flashingLeds[i];       

    unsigned long lifeSpan = (led.color == colorC) ? specialLifespan : normalLifespan;


    if (currentTime - led.startTime >= lifeSpan) {                      // Check if LED lifespan is up
      strip.setPixelColor(led.pixel, 0);                                // Turn off LED
      led.ledOn = false;
      led.active = false;
      strip.show();                                                     // Update the strip
      startPlayback(miss, sizeof(miss));
      ResetCombo();
    
      continue;
    }
    

    if (currentTime - led.lastToggleTime >= led.delayTime) {      // Check if its time to toggle
      led.lastToggleTime = currentTime;                           // Update the last toggle time
      led.ledOn = !led.ledOn;                                     // Toggle the LED state

      if (led.ledOn) {
        strip.setPixelColor(led.pixel, led.color);                // LED on
      } else {
        strip.setPixelColor(led.pixel, 0);                        // LED off
        led.delayTime = max(minBlinkDelay, led.delayTime * blinkAcceleration);             // Decrease the delay to flash faster and faster
      }
      strip.show(); 
    }
  }
}

void ResetCombo(){
  combo = 1;
}

void theaterChase() {
  unsigned long currentMillis = millis();

  // Determine color based on current time
  useAltColor = (currentMillis / colorChangeInterval) % 2;
  uint32_t chase_color = useAltColor ? colorA : colorB;

  if (currentMillis - chasePreviousMillis >= blinkFrequency) {
    chasePreviousMillis = currentMillis;

    for (uint16_t i = 0; i < strip.numPixels(); i += 3) {
      strip.setPixelColor(i + chase_q, chase_color);
    }
    strip.show();

    for (uint16_t i = 0; i < strip.numPixels(); i += 3) {
      strip.setPixelColor(i + chase_q, 0);
    }

    chase_q = (chase_q + 1) % 3;
  }
}

// void checkMagnetPresence()
// {  
//   //This function runs in the setup() and it locks the MCU until the magnet is not positioned properly

//   while((magnetStatus & 32) != 32) //while the magnet is not adjusted to the proper distance - 32: MD = 1
//   {
//     magnetStatus = 0; //reset reading

//     Wire.beginTransmission(0x36); //connect to the sensor
//     Wire.write(0x0B); //figure 21 - register map: Status: MD ML MH
//     Wire.endTransmission(); //end transmission
//     Wire.requestFrom(0x36, 1); //request from the sensor

//     while(Wire.available() == 0); //wait until it becomes available 
//     magnetStatus = Wire.read(); //Reading the data after the request

//     Serial.print("Magnet status: ");
//     Serial.println(magnetStatus); //print it in binary so you can compare it to the table (fig 21)      
//   }
//   //Status register output: 0 0 MD ML MH 0 0 0  
//   //MH: Too strong magnet - 100111 - DEC: 39 
//   //ML: Too weak magnet - 10111 - DEC: 23     
//   //MD: OK magnet - 110111 - DEC: 55

//   Serial.println("Magnet found!");
//   delay(1000); 
// }      